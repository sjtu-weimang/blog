<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用hexo部署博客的操作流程和踩过的一些坑</title>
      <link href="/blog/2024/04/11/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
      <url>/blog/2024/04/11/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>使用hexo部署个人博客教程</p><h1 id="部署流程简介"><a href="#部署流程简介" class="headerlink" title="部署流程简介"></a>部署流程简介</h1><h2 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h2><p>1.hexo依赖于node.js环境运行，在安装node.js后，使用npm安装hexo<br>2.使用hexo init 初始化一个本地仓库<br>3.使用hexo g 生成静态文件<br>4.使用hexo s 启动本地服务器，可以预览效果</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g     <span class="comment">#在全局安装hexo</span></span><br><span class="line">hexo init blog              <span class="comment">#初始化</span></span><br><span class="line"><span class="built_in">cd</span> blog                     <span class="comment">#进入文件目录</span></span><br><span class="line">npm install                 <span class="comment">#安装依赖</span></span><br><span class="line">hexo server                 <span class="comment">#在本地服务器运行</span></span><br></pre></td></tr></table></figure></code></pre><p>这时候个人博客已经可以在本地服务器的4000端口访问了。</p><!-- ![picture](./img/test.jpg "localblog") --><h2 id="准备github仓库"><a href="#准备github仓库" class="headerlink" title="准备github仓库"></a>准备github仓库</h2><p>1.在github上新创建一个仓库，仓库名必须为username.github.io(若仓库名与GitHub账户名不同，则url为username.github.io&#x2F;repoisitoryname)。<br>2.在新仓库的Settings-&gt;Pages-&gt;Build and deployment选项中选择博客网页的源分支，一般为main&#x2F;(root)。<br>3.配置好GitHub的<a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">SSH</a> ,否则在push时会遇到权限问题。<br>4.将本地仓库与远程仓库建立链接：</p><!-- [SSH](https://blog.csdn.net/weixin_42310154/article/details/118340458) --><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地仓库目录下</span></span><br><span class="line">git init                <span class="comment">#初始化本地仓库</span></span><br><span class="line">git remote add origin git@github.com:yourName/repositoryname.git </span><br><span class="line"><span class="comment">#origin是远程仓库的别名</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p><strong>部署到个人网站与一般仓库不同，不能使用”add-commit-pull-push”的推送流程，要借助部署工具</strong></p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save        <span class="comment">#安装部署工具</span></span><br></pre></td></tr></table></figure></code></pre><p>修改根目录下_config.yml配置文档(在键和值之间有一个空格，否则会提示缩进错误！)</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在文档的末尾</span></span><br><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git                                   <span class="comment">#部署方式</span></span><br><span class="line">    repo: &lt;git@github.com&gt;:yourname/blog.git    <span class="comment">#仓库链接</span></span><br><span class="line">    branch: main                                <span class="comment">#对应的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在文档的14-22行</span></span><br><span class="line">url: https://yourname.github.io/blog/           <span class="comment">#博客的网址</span></span><br><span class="line">root: /blog                                     <span class="comment">#GitHub中仓库的路径</span></span><br></pre></td></tr></table></figure></code></pre><p>修改后配置文档后，再次打开终端，输入以下命令进行远程部署。</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean                                  <span class="comment"># 清除缓存文件等</span></span><br><span class="line">hexo g                                      <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                                      <span class="comment"># 部署到远程</span></span><br></pre></td></tr></table></figure></code></pre><p>以后每次新发布文章后，都按照此流程进行部署。<br>这时打开GitHub仓库-&gt;action,可以看到部署的进程，一般需要几分钟。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Write blog using markdown</title>
      <link href="/blog/2024/04/10/Write-blog-using-markdown/"/>
      <url>/blog/2024/04/10/Write-blog-using-markdown/</url>
      
        <content type="html"><![CDATA[<p>飞洒方法是的</p><span id="more"></span><pre><code>                &lt;p&gt; 独立式运动控制器配有显示屏、按键和功能完善的控制指令，并有各种通信接口，控制电动机运动的能力比PLC强大。可完成直线插补、圆弧插补、轨迹控制等功能，且编程简单。目前，国外的运动控制器都具有现场总线控制功能。                        3）PCI总线型运动控制卡                        由于PC机运算速度快、存储量大，而且Windows操作系统的软件资源丰富，采用VB、VC等软件编写用户程序,功能十分强大。很多自动化设备都离不开PC机，特别是采用机器视觉检测的自动化设备、需要运行AuoCAD等大型软件的设备和需要采集存储生产数据的设备等，因此，这些设备采用基于PC机的PCI总线型运动控制卡与PC机一起组成运动控制器。在所有的运动控制器中，运动控制卡的功能最强，但其工作的稳定性可靠性较差。                        4）专用运动控制器                        专用运动控制器是针对特定的设备专门设计的运动控制器，如绣花机控制器、缝纫机控制器喷绘机控制器等。专用运动控制器通常以单片机、ARM等芯片为核心设计，其集成度高、价格便宜、使用方便，软件是为专用设备特殊设计的，客户可直接使用。其硬件、软件的设计都充分考虑了专用设备的工艺要求。                        相对于专用运动控制器而言,PLC、独立式运动控制器、运动控制卡被称为通用运动控制器。                        独立式运动控制器配有显示屏、按键和功能完善的控制指令，并有各种通信接口，控制电动机运动的能力比PLC强大。可完成直线插补、圆弧插补、轨迹控制等功能，且编程简单。目前，国外的运动控制器都具有现场总线控制功能。                        3）PCI总线型运动控制卡                        由于PC机运算速度快、存储量大，而且Windows操作系统的软件资源丰富，采用VB、VC等软件编写用户程序,功能十分强大。很多自动化设备都离不开PC机，特别是采用机器视觉检测的自动化设备、需要运行AuoCAD等大型软件的设备和需要采集存储生产数据的设备等，因此，这些设备采用基于PC机的PCI总线型运动控制卡与PC机一起组成运动控制器。在所有的运动控制器中，运动控制卡的功能最强，但其工作的稳定性可靠性较差。                        4）专用运动控制器                        专用运动控制器是针对特定的设备专门设计的运动控制器，如绣花机控制器、缝纫机控制器喷绘机控制器等。专用运动控制器通常以单片机、ARM等芯片为核心设计，其集成度高、价格便宜、使用方便，软件是为专用设备特殊设计的，客户可直接使用。其硬件、软件的设计都充分考虑了专用设备的工艺要求。                        相对于专用运动控制器而言,PLC、独立式运动控制器、运动控制卡被称为通用运动控制器。                        独立式运动控制器配有显示屏、按键和功能完善的控制指令，并有各种通信接口，控制电动机运动的能力比PLC强大。可完成直线插补、圆弧插补、轨迹控制等功能，且编程简单。目前，国外的运动控制器都具有现场总线控制功能。                        3）PCI总线型运动控制卡                        由于PC机运算速度快、存储量大，而且Windows操作系统的软件资源丰富，采用VB、VC等软件编写用户程序,功能十分强大。很多自动化设备都离不开PC机，特别是采用机器视觉检测的自动化设备、需要运行AuoCAD等大型软件的设备和需要采集存储生产数据的设备等，因此，这些设备采用基于PC机的PCI总线型运动控制卡与PC机一起组成运动控制器。在所有的运动控制器中，运动控制卡的功能最强，但其工作的稳定性可靠性较差。                        4）专用运动控制器                        专用运动控制器是针对特定的设备专门设计的运动控制器，如绣花机控制器、缝纫机控制器喷绘机控制器等。专用运动控制器通常以单片机、ARM等芯片为核心设计，其集成度高、价格便宜、使用方便，软件是为专用设备特殊设计的，客户可直接使用。其硬件、软件的设计都充分考虑了专用设备的工艺要求。                        相对于专用运动控制器而言,PLC、独立式运动控制器、运动控制卡被称为通用运动控制器。                        独立式运动控制器配有显示屏、按键和功能完善的控制指令，并有各种通信接口，控制电动机运动的能力比PLC强大。可完成直线插补、圆弧插补、轨迹控制等功能，且编程简单。目前，国外的运动控制器都具有现场总线控制功能。                        3）PCI总线型运动控制卡                        由于PC机运算速度快、存储量大，而且Windows操作系统的软件资源丰富，采用VB、VC等软件编写用户程序,功能十分强大。很多自动化设备都离不开PC机，特别是采用机器视觉检测的自动化设备、需要运行AuoCAD等大型软件的设备和需要采集存储生产数据的设备等，因此，这些设备采用基于PC机的PCI总线型运动控制卡与PC机一起组成运动控制器。在所有的运动控制器中，运动控制卡的功能最强，但其工作的稳定性可靠性较差。                        4）专用运动控制器                        专用运动控制器是针对特定的设备专门设计的运动控制器，如绣花机控制器、缝纫机控制器喷绘机控制器等。专用运动控制器通常以单片机、ARM等芯片为核心设计，其集成度高、价格便宜、使用方便，软件是为专用设备特殊设计的，客户可直接使用。其硬件、软件的设计都充分考虑了专用设备的工艺要求。                        相对于专用运动控制器而言,PLC、独立式运动控制器、运动控制卡被称为通用运动控制器。                        独立式运动控制器配有显示屏、按键和功能完善的控制指令，并有各种通信接口，控制电动机运动的能力比PLC强大。可完成直线插补、圆弧插补、轨迹控制等功能，且编程简单。目前，国外的运动控制器都具有现场总线控制功能。                        3）PCI总线型运动控制卡                        由于PC机运算速度快、存储量大，而且Windows操作系统的软件资源丰富，采用VB、VC等软件编写用户程序,功能十分强大。很多自动化设备都离不开PC机，特别是采用机器视觉检测的自动化设备、需要运行AuoCAD等大型软件的设备和需要采集存储生产数据的设备等，因此，这些设备采用基于PC机的PCI总线型运动控制卡与PC机一起组成运动控制器。在所有的运动控制器中，运动控制卡的功能最强，但其工作的稳定性可靠性较差。                        4）专用运动控制器                        专用运动控制器是针对特定的设备专门设计的运动控制器，如绣花机控制器、缝纫机控制器喷绘机控制器等。专用运动控制器通常以单片机、ARM等芯片为核心设计，其集成度高、价格便宜、使用方便，软件是为专用设备特殊设计的，客户可直接使用。其硬件、软件的设计都充分考虑了专用设备的工艺要求。                        相对于专用运动控制器而言,PLC、独立式运动控制器、运动控制卡被称为通用运动控制器。&lt;/p&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2024/03/23/hello-world/"/>
      <url>/blog/2024/03/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
