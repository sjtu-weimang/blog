<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/blog/2024/04/11/test/"/>
      <url>/blog/2024/04/11/test/</url>
      
        <content type="html"><![CDATA[const text = "cat,bat,hat,sat,fit";console.log(/.at/.test(text));//trueconst result1 = text.search(/.at/);const result2 = text.search(/at/g);console.log(result1);//3console.log(result2);//3]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及其解决</title>
      <link href="/blog/2024/03/28/%E8%B7%A8%E5%9F%9F%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2024/03/28/%E8%B7%A8%E5%9F%9F%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域问题的提出"><a href="#跨域问题的提出" class="headerlink" title="跨域问题的提出"></a>跨域问题的提出</h2><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><p>跨域是指在浏览器环境中存在的一种资源同源保护策略。当页面使用ajax&#x2F;fetch进行网络请求或者页面进行资源请求时，网络协议、域名、端口不一致时就会触发浏览器的同源策略保护机制。</p><p>当你的浏览器出现跨域的时候,会有固定格式的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://127.0.0.1:3000/api/getbooks&#x27; from origin &#x27;xxx&#x27; has been blocked </span><br><span class="line">by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><h4 id="什么时候会产生跨域？"><a href="#什么时候会产生跨域？" class="headerlink" title="什么时候会产生跨域？"></a>什么时候会产生跨域？</h4><p> 跨域 : “ajax请求地址” 与 “当前页面地址”  “不同源” , 称为跨域<br>    (1)ajax请求 : 跨域只会出现在ajax请求<br>        * ajax地址 : 服务器接口文档地址<br>    (2)当前页面地址 :  location.href<br>    (3)不同源 : 协议名、ip地址、端口号  只要有任意一个不相同,就是不同源</p><h4 id="什么是同源？"><a href="#什么是同源？" class="headerlink" title="什么是同源？"></a>什么是同源？</h4><p> 同源 :  协议名、ip地址、端口号 三者一致就叫同源<br>    当前页面地址 : <a href="http://127.0.0.1:3000/home/index.html">http://127.0.0.1:3000/home/index.html</a><br>    ajax地址1 : <a href="https://127.0.0.1:3000/abc">https://127.0.0.1:3000/abc</a>   (不同源,协议不同)<br>    ajax地址2 : <a href="http://127.0.0.1:3000/abc">http://127.0.0.1:3000/abc</a>   (同源, 三码合一)<br>    ajax地址3 : <a href="http://192.168.48.81:3000/abc">http://192.168.48.81:3000/abc</a>  (不同源, ip不同)<br>    ajax地址4 : <a href="http://127.0.0.1:4399/abc">http://127.0.0.1:4399/abc</a> (不同源,端口号不同)</p><h2 id="如何解决跨域问题？"><a href="#如何解决跨域问题？" class="headerlink" title="如何解决跨域问题？"></a>如何解决跨域问题？</h2><h4 id="CORS技术解决方案-目前的技术主流"><a href="#CORS技术解决方案-目前的技术主流" class="headerlink" title="CORS技术解决方案(目前的技术主流)"></a>CORS技术解决方案(目前的技术主流)</h4><pre><code>只需要在服务器端设置一个允许跨域响应头：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure></code></pre><h4 id="JASONP解决方案"><a href="#JASONP解决方案" class="headerlink" title="JASONP解决方案"></a>JASONP解决方案</h4><pre><code>1.核心原理 : 利用script标签src属性来发送请求, 因为跨域只对ajax有限制2.了解script标签src属性做了什么事情    (1)给服务器发送请求    (2)执行服务器响应返回的js代码3.jsonp完整流程    (1)浏览器 : 声明一个函数,用于接收服务器响应数据    (2)浏览器: 写一个script标签, 路径是jsonp请求地址,添加一个额外参数callback=函数名    (3)服务器: 处理完请求之后, 返回一个函数调用的js代码,格式res.send( &#39;函数名(响应数据)&#39; )        * 函数名需要从参数callback获取(4)浏览器就会执行script标签响应的js代码</code></pre><h2 id="跨域场景模拟"><a href="#跨域场景模拟" class="headerlink" title="跨域场景模拟"></a>跨域场景模拟</h2><h4 id="CORS的场景模拟"><a href="#CORS的场景模拟" class="headerlink" title="CORS的场景模拟"></a>CORS的场景模拟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//模拟浏览器发送跨域请求</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="comment">//cors按钮</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//(1).实例化ajax对象</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        <span class="comment">//(2).设置请求方法和地址</span></span><br><span class="line">        <span class="comment">//get请求的数据直接添加在url的后面 格式是 url?key=value</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/abc&#x27;</span>)</span><br><span class="line">        <span class="comment">//(3).发送请求</span></span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">        <span class="comment">//(4).注册回调函数</span></span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟服务器接受跨域请求</span></span><br><span class="line">    <span class="comment">//1.导入模块</span></span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line">    <span class="comment">//2.创建服务器</span></span><br><span class="line">    <span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置跨域中间件 : 类似于拦截器,会给每一个路由自动设置允许跨域响应头</span></span><br><span class="line">    <span class="comment">// //(1)导入模块</span></span><br><span class="line">    <span class="comment">// const cors = require(&#x27;cors&#x27;)</span></span><br><span class="line">    <span class="comment">// //(2)使用模块</span></span><br><span class="line">    <span class="comment">// app.use(cors())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cors技术解决跨域</span></span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//允许跨域响应头</span></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        <span class="comment">//设置content-type响应头</span></span><br><span class="line">        <span class="comment">//响应数据</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;我是html&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JASONOP的场景模拟"><a href="#JASONOP的场景模拟" class="headerlink" title="JASONOP的场景模拟"></a>JASONOP的场景模拟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1.jsonp整体工作流程(把jsonp封装到按钮点击事件里面)</span></span><br><span class="line"><span class="comment">      浏览器在动态创建script标签时，相当于向url发送了一次get请求，且该请求</span></span><br><span class="line"><span class="comment">      不受跨域约束，同时在请求参数中携带了一个回调函数，回调函数中携带了</span></span><br><span class="line"><span class="comment">      服务器返回的信息。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//服务器接收的回调函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getBook</span> = res =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="comment">//一旦响应了jsonp数据之后,就移除script标签</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#jsonp&#x27;</span>).<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//(1)声明函数接收服务器响应数据 (需要是全局函数)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)给页面动态添加script</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:3000/aaa?callback=getBook&#x27;</span></span><br><span class="line">        script.<span class="property">id</span> = <span class="string">&#x27;jsonp&#x27;</span></span><br><span class="line">        <span class="comment">//一般动态jsonp会添加到head标签</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器对jsonp请求的响应</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.导入模块</span></span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line">    <span class="comment">//2.创建服务器</span></span><br><span class="line">    <span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line">                app.<span class="title function_">get</span>(<span class="string">&#x27;/aaa&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">        <span class="comment">//调用浏览器传递过来的那个函数名</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;req.query.callback&#125;</span>([&quot;西游记&quot;,&quot;水浒传&quot;])`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.开启服务器</span></span><br><span class="line">    app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>JSONP方法的优点：兼容性好，支持老的浏览器<br>缺点：只支持get请求，因为script标签请求资源本质就是一个get请求<br>    需要服务端专门配置，把数据用callback函数名包裹起来再返回</p><h2 id="深入了解CORS方案"><a href="#深入了解CORS方案" class="headerlink" title="深入了解CORS方案"></a>深入了解CORS方案</h2><blockquote><p>CORS是w3c指定的跨域方案，支持所有类型的请求；兼容性：ie不能低于ie 10<br>CORS跨域方案将所有请求划分为简单请求和非简单请求两类，对其分别采用不同的处理方案。</p></blockquote><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>同时满足以下两个条件的请求属于简单请求：</p><p>请求方法是get、 post、 head中的一种<br>http头字段不超出：<br>Accept<br>Accept-Language<br>Accept-Language<br>Content-Type仅限于text&#x2F;plain、multipart&#x2F;form-data、application&#x2F;x-www-form-urlencoded</p><h4 id="简单请求流程"><a href="#简单请求流程" class="headerlink" title="简单请求流程"></a>简单请求流程</h4><p>浏览器在请求头中自动加入origin字段，origin字段用来说明本次请求来自哪个源（协议+域名+端口），服务器根据这个值，决定是否同意这次请求。<br>如果origin指定的源，不在许可范围内，服务器会返回一个正常的http回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。<br>如果Origin指定的域名在许可范围内，服务器返回的头字段中会包含Access-Control-Allow-Origin，它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><h4 id="如何设置cookie？"><a href="#如何设置cookie？" class="headerlink" title="如何设置cookie？"></a>如何设置cookie？</h4><p>cors请求默认不携带cookie，如果想要发送cookie，需要服务端和客户端同时设置<br>一方面要服务器同意，指定Access-Control-Allow-Credentials: true<br>另一方面，开发者必须在ajax请求中打开withCredentials属性。xhr.withCredentials &#x3D; true;</p><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>预检请求<br>非简单请求需要先发出一个预检请求，预检请求方法是OPTIONS，用来获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响（PUT、delete）<br>请求头字段<br>Origin<br>Access-Control-Request-Method<br>Access-Control-Request-Headers</p><h4 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h4><ul><li><p>如果允许跨源请求</p><ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Methods（返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。）</li><li>Access-Control-Allow-Headers（是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。）</li><li>Access-Control-Allow-Credentials<br>  *Access-Control-Max-Age该字段可选，用来指定本次预检请求的有效期，单位为秒。在此期间，不用发出另一条预检请求。</li></ul></li><li><p>如果不允许，比如origin不在信任名单内,会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。浏览器就会报错</p></li></ul><h4 id="正常请求"><a href="#正常请求" class="headerlink" title="正常请求"></a>正常请求</h4><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>跨域是浏览器的保护机制，如果绕过浏览器，使用代理服务器去请求目标服务器上的数据，就不会受跨域影响。因此前端可以通过脚手架或webpack配置devSever下的proxy选项，将&#x2F;api开头的请求转发到真实服务器上。<br>在生产环境下也可以使用nginx配置反向代理来解决跨域。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从闭包到内存管理————记一次面试经历</title>
      <link href="/blog/2024/03/21/javacript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/blog/2024/03/21/javacript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要记录一次面试经历，面试官从闭包问起，逐步深入到内存管理的相关问题。</p></blockquote><hr><h4 id="首先解释什么是闭包"><a href="#首先解释什么是闭包" class="headerlink" title="首先解释什么是闭包"></a>首先解释什么是闭包</h4><p>我的回答从变量的作用域入手，闭包指一个可以访问到其他函数作用域的函数。<br>js的链式作用域：一个函数可以访问到父级作用域的变量，但是父级不能访问函数内部的变量。</p><h4 id="闭包有什么应用场景，有什么优势以及劣势"><a href="#闭包有什么应用场景，有什么优势以及劣势" class="headerlink" title="闭包有什么应用场景，有什么优势以及劣势"></a>闭包有什么应用场景，有什么优势以及劣势</h4><ol><li><p>应用场景举例：<br> (1)实现变量的私有化,实际上相当于定义了一个类。<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAge</span>()); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><br><br> (2)setTimeOut()函数传参，原生的setTimeOut函数的第一个参数不能传参，使用闭包可实现对setTimeOut函数的封装。<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">message,time</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    &#125;,time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p></li><li><p>使用闭包带来的副作用<br> (1)闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。闭包，不会在调用结束后被垃圾回收机制回收，解决方法是，在退出函数之前，将不使用的局部变量全部删除(赋值为null)。<br> (2)闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ol><h4 id="javascirpt的垃圾回收和内存管理机制"><a href="#javascirpt的垃圾回收和内存管理机制" class="headerlink" title="javascirpt的垃圾回收和内存管理机制"></a>javascirpt的垃圾回收和内存管理机制</h4><ol><li><strong>标记清理</strong>是最常用的垃圾回收策略，当变量进入执行环境时，比如函数中声明一个变量，这个变量会被加上存在于上下文标记，离开上下文时，也会被加上离开上下文的标记。垃圾回收程序运行时，会标记所有变量，然后将所有在上下文中和上下文中引用的变量标记清除，随后销毁所有带标记的值，并回收内存。</li><li><strong>引用计数</strong>是另一种跟踪内存使用情况的方法，它把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果一个对象没有任何引用，即“对象引用计数为0”，那么该对象就会被垃圾回收。引用计数在循环引用时无法回收内存，现已被弃用。</li><li><strong>分代回收</strong>V8引擎将内存分为新生代和老生代，新生代中对象存活率低，老生代中对象存活率高。<br> 新生代 —— 就是指存活时间较短的对象，例如：一个局部作用域中，只要函数执行完毕之后变量就会回收。<br> 老生代 —— 就是指存活时间较长的对象，例如：全局对象，闭包变量数据。<br> 新生代内存区分为两个等大小空间，使用空间为From，空闲空间为To。如果需要申请空间使用，回收步骤如下： 1. 首先会将所有活动对象存储于From空间，这个过程中To是空闲状态。 2. 当From空间使用到一定程度之后就会触发GC操作，这个时候会进行标记整理对活动对象进行标记并移动位置将使用空间变得连续，便于后续不会产生碎片化空间。 3. 将活动对象拷贝至To空间，拷贝完成之后活动空间就有了备份，这个时候就可以考虑回收操作了。 4. 把From空间完成释放，回收完成 5. 对From和To名称进行调换，继续重复之前的操作。总结就是：使用From -&gt; 触发GC标记整理 -&gt; 拷贝到To -&gt; 回收From -&gt; 名称互换重复之前。<br> 老生代中的对象使用“Mark-Sweep”(标记清除)和“Mark-Compact”(标记整理)两种算法。</li></ol><h4 id="内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？"><a href="#内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？" class="headerlink" title="内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？"></a>内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？</h4><ol><li>内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</li><li>内存泄漏的常见场景：<br> (1)全局变量和闭包<br> 解决方法：全局变量应先声明再赋值，将全局变量和闭包变量设置为null，让它们在内存中消失。<br> (2)被遗忘的DOM元素<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>我是子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    root.<span class="title function_">removeChild</span>(child)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//这里的child元素虽然从dom树中被移除，但全局变量child仍然指向该元素，所以该元素无法被垃圾回收机制回收。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br> 解决方法：在DOM元素被移除时，及时清除它的事件监听器，将对dom元素的引用放在局部作用域中。<br><br> (3)被遗忘的定时器<br> 解决方法：在不需要定时器时，及时清除定时器(调用clearInterval()和clearTimeout())。<br><br> (4)控制台打印console.log()的使用<br> 在控制台打印一个变量时，该变量的this指向了全局对象window,不能被销毁，从而造成内存泄漏。<br> 解决方法：在调试完毕后，及时清理。</li></ol><h4 id="出现了内存泄漏时，如何排查？"><a href="#出现了内存泄漏时，如何排查？" class="headerlink" title="出现了内存泄漏时，如何排查？"></a>出现了内存泄漏时，如何排查？</h4><p>打开开发者工具，选择性能选项卡，点击录制按钮，然后进行一系列操作，再停止录制按钮，此时开发者工具会给出一个内存泄漏的提示。同时记录了每个时刻内存的占用情况。<br>    <img src="https://github.com/sjtu-weimang/blog/blob/main/img/memory.png?raw=true" width=400 height=360></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的正则表达式</title>
      <link href="/blog/2023/11/12/JavaScirpt%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2023/11/12/JavaScirpt%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="RegExp的常见匹配模式"><a href="#RegExp的常见匹配模式" class="headerlink" title="RegExp的常见匹配模式"></a>RegExp的常见匹配模式</h2><p>ECMAJavaScript通过RegExp类型支持正则表达式，可用于字符串按照一定规则的匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let expression =/pattern/flags</span><br></pre></td></tr></table></figure><h4 id="正则表达式中的元字符"><a href="#正则表达式中的元字符" class="headerlink" title="正则表达式中的元字符"></a>正则表达式中的元字符</h4><p>元字符是正则表达式中的特殊字符，用于表示一些特定的模式。在匹配元字符时必须使用反斜杠’&#39;进行转义，<br>以下是常见的元字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()[]&#123;&#125;\^$|.?*+</span><br></pre></td></tr></table></figure><h4 id="常见的匹配规则"><a href="#常见的匹配规则" class="headerlink" title="常见的匹配规则"></a>常见的匹配规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> \d: 匹配一个数字。</span><br><span class="line"><span class="number">2.</span> \w: 匹配一个字母或数字。</span><br><span class="line"><span class="number">3.</span> \s: 匹配一个空白字符。</span><br><span class="line"><span class="number">4.</span> \b: 匹配一个单词边界。</span><br><span class="line"><span class="number">5.</span> \D: 匹配一个非数字的字符。</span><br><span class="line"><span class="number">6.</span> \W: 匹配一个非字母或数字的字符。</span><br><span class="line"><span class="number">7.</span> \S: 匹配一个非空白字符。</span><br><span class="line"><span class="number">8.</span> \[abcd\]: 匹配方括号中的任意一个字符。</span><br><span class="line"><span class="number">9.</span> \[^abcd\]: 匹配不在方括号中的任意一个字符。</span><br><span class="line"><span class="number">10.</span> \[a-z\]: 匹配指定范围内的任意一个字符。</span><br><span class="line"><span class="number">11.</span> abc$: 匹配以abc结尾的字符串。</span><br><span class="line"><span class="number">12.</span> ^abc: 匹配以abc开头的字符串。</span><br><span class="line"><span class="number">13.</span> \d&#123;<span class="number">3</span>&#125;: 匹配三个数字。</span><br><span class="line"><span class="number">14.</span> a?: 匹配零个或一个a，效果等同于a&#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"><span class="number">15.</span> a*: 匹配零个或多个a，效果等同于a&#123;<span class="number">0</span>,&#125;。</span><br><span class="line"><span class="number">16.</span> a+: 匹配一个或多个a，效果等同于a&#123;<span class="number">1</span>,&#125;。</span><br><span class="line"><span class="number">17.</span> a|b: 匹配a或b，效果等同于a&#123;<span class="number">0</span>,<span class="number">1</span>&#125;|b&#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"><span class="number">18.</span> (abc): 匹配abc，并将匹配结果保存到括号中。</span><br><span class="line"><span class="number">19.</span> (?:abc): 匹配abc，但不保存匹配结果到括号中。</span><br><span class="line"><span class="number">20.</span> (?=abc): 正向先行断言，匹配后面跟着abc的字符串。</span><br><span class="line"><span class="number">21.</span> (?!abc): 负向先行断言，匹配后面不跟着abc的字符串。</span><br><span class="line"><span class="number">22.</span> (?&lt;=abc): 反向先行断言，匹配前面跟着abc的字符串。</span><br><span class="line"><span class="number">23.</span> (?&lt;!abc): 负向反向先行断言，匹配前面不跟着abc的字符串。</span><br><span class="line"><span class="number">24.</span> \bhello\b: 匹配包含hello的单词,\b表示字符边界。</span><br><span class="line"><span class="number">25.</span> \Bhello\B: 匹配不包含hello的单词,\B表示非字符边界。 </span><br></pre></td></tr></table></figure><h4 id="匹配模式的标记flag"><a href="#匹配模式的标记flag" class="headerlink" title="匹配模式的标记flag"></a>匹配模式的标记flag</h4><p>每个正则表达式后方可以附带一个或多个标记，用于控制正则表达式的行为。以下是常见的标记：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g: 全局匹配，匹配字符串中所有满足正则表达式的内容。</span><br><span class="line">i: 不区分大小写，匹配时忽略pattern和字符串的大小写。</span><br><span class="line">m: 多行模式，在查找到一行的末尾后会继续查找。</span><br><span class="line">y: 粘附模式，只查找从lastIndex开始及之后的字符串。</span><br></pre></td></tr></table></figure><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>正则表达式可以直接使用字面量创建，表达式的内容写在两个斜杠‘&#x2F;’之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let expression = /pattern/flags</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>正则表达式也可以使用构造函数创建，构造函数的参数为两个，第一个为pattern，第二个为flags。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> expression = <span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern, flags)</span><br></pre></td></tr></table></figure><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><p>test()方法用于测试字符串是否符合正则表达式的规则，返回一个布尔值true&#x2F;false。<br>test()经常用在if语句中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text =<span class="string">&quot;000-00-0000&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(text));         <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>exec()方法用于在字符串中查找符合正则表达式的内容，返回一个数组。如果没有全局标志g，则每次调用都只会返回第一个匹配的内容。<br>添加g后，每次调用exec()会在字符串中向前搜索下一个匹配项,直到搜索不到返回null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text= <span class="string">&quot;cat,bat,hit,sit,fit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//[ &#x27;cat&#x27;, index: 0, input: &#x27;cat,bat,hit,sit,fit&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//[ &#x27;bat&#x27;, index: 4, input: &#x27;cat,bat,hit,sit,fit&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//null                  </span></span><br></pre></td></tr></table></figure><h2 id="正则表达式在字符串中的使用"><a href="#正则表达式在字符串中的使用" class="headerlink" title="正则表达式在字符串中的使用"></a>正则表达式在字符串中的使用</h2><h4 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h4><p>match()方法是<strong>字符串的方法</strong>用于在字符串中查找符合正则表达式的内容，返回一个数组，内容与exec()方法相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/World/</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">match</span>(reg);</span><br></pre></td></tr></table></figure><p>search()也是<strong>字符串</strong>的方法，用于在字符串中查找符合正则表达式的内容，返回一个整数，表示匹配到的位置。search()方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 string 的第一个匹配的位置。</p><h4 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a>search()方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text= <span class="string">&quot;cat,bat,hit,sit,fit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = text.<span class="title function_">search</span>(<span class="regexp">/at/g</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>replace()方法是<strong>字符串</strong>的方法，用于在字符串中查找符合正则表达式的内容，并替换为新的内容。replace()支持全局匹配，第一个参数为模式串，第二个参数可以是字符串或一个函数，若第二个参数为函数，则使用函数的返回值进行替换。replace()不改变调用字符串的内容，返回一个新的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/World/</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(reg, <span class="string">&quot;JavaScript&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo部署博客的操作流程和踩过的一些坑</title>
      <link href="/blog/2023/03/16/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
      <url>/blog/2023/03/16/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>使用hexo部署个人博客教程</p><h1 id="部署流程简介"><a href="#部署流程简介" class="headerlink" title="部署流程简介"></a>部署流程简介</h1><h2 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h2><p>1.hexo依赖于node.js环境运行，在安装node.js后，使用npm安装hexo<br>2.使用hexo init 初始化一个本地仓库<br>3.使用hexo g 生成静态文件<br>4.使用hexo s 启动本地服务器，可以预览效果</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g     <span class="comment">#在全局安装hexo</span></span><br><span class="line">hexo init blog              <span class="comment">#初始化</span></span><br><span class="line"><span class="built_in">cd</span> blog                     <span class="comment">#进入文件目录</span></span><br><span class="line">npm install                 <span class="comment">#安装依赖</span></span><br><span class="line">hexo server                 <span class="comment">#在本地服务器运行</span></span><br></pre></td></tr></table></figure></code></pre><p>这时候个人博客已经可以在本地服务器的4000端口访问了。</p><!-- ![picture](./img/test.jpg "localblog") --><h2 id="准备github仓库"><a href="#准备github仓库" class="headerlink" title="准备github仓库"></a>准备github仓库</h2><p>1.在github上新创建一个仓库，仓库名必须为username.github.io(若仓库名与GitHub账户名不同，则url为username.github.io&#x2F;repoisitoryname)。<br>2.在新仓库的Settings-&gt;Pages-&gt;Build and deployment选项中选择博客网页的源分支，一般为main&#x2F;(root)。<br>3.配置好GitHub的<a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">SSH</a> ,否则在push时会遇到权限问题。<br>4.将本地仓库与远程仓库建立链接：</p><!-- [SSH](https://blog.csdn.net/weixin_42310154/article/details/118340458) --><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地仓库目录下</span></span><br><span class="line">git init                <span class="comment">#初始化本地仓库</span></span><br><span class="line">git remote add origin git@github.com:yourName/repositoryname.git </span><br><span class="line"><span class="comment">#origin是远程仓库的别名</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p><strong>部署到个人网站与一般仓库不同，不能使用”add-commit-pull-push”的推送流程，要借助部署工具</strong></p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save        <span class="comment">#安装部署工具</span></span><br></pre></td></tr></table></figure></code></pre><p>修改根目录下_config.yml配置文档(在键和值之间有一个空格，否则会提示缩进错误！)</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在文档的末尾</span></span><br><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git                                   <span class="comment">#部署方式</span></span><br><span class="line">    repo: &lt;git@github.com&gt;:yourname/blog.git    <span class="comment">#仓库链接</span></span><br><span class="line">    branch: main                                <span class="comment">#对应的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在文档的14-22行</span></span><br><span class="line">url: https://yourname.github.io/blog/           <span class="comment">#博客的网址</span></span><br><span class="line">root: /blog                                     <span class="comment">#GitHub中仓库的路径</span></span><br></pre></td></tr></table></figure></code></pre><p>修改后配置文档后，再次打开终端，输入以下命令进行远程部署。</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean                                  <span class="comment"># 清除缓存文件等</span></span><br><span class="line">hexo g                                      <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                                      <span class="comment"># 部署到远程</span></span><br></pre></td></tr></table></figure></code></pre><p>以后每次新发布文章后，都按照此流程进行部署。<br>这时打开GitHub仓库-&gt;action,可以看到部署的进程，一般需要几分钟。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/06/21/hello-world/"/>
      <url>/blog/2022/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
