<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/blog/2024/04/14/React%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6/"/>
      <url>/blog/2024/04/14/React%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSFR攻击及预防</title>
      <link href="/blog/2024/04/12/CSFR%E6%94%BB%E5%87%BB%E5%8F%8A%E9%A2%84%E9%98%B2/"/>
      <url>/blog/2024/04/12/CSFR%E6%94%BB%E5%87%BB%E5%8F%8A%E9%A2%84%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CSRF攻击"><a href="#什么是CSRF攻击" class="headerlink" title="什么是CSRF攻击"></a>什么是CSRF攻击</h2><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相去甚远。<br>CSRF是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。可以简单的理解为：攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。攻击者只要借助少许的社会工程学的诡计，例如通过 QQ 等聊天软件发送的链接（有些还伪装成短域名，用户无法分辨），攻击者就能迫使 Web 应用的用户去执行攻击者预设的操作。</p><h2 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h2><p>1、用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；<br>2、在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；<br>3、用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；<br>4、网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；<br>5、浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</p><p>CSRF 攻击的三个条件 :</p><p>1 . 用户已经登录了站点 A，并在本地记录了 cookie<br>2 . 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。<br>3 . 站点 A 没有做任何 CSRF 防御</p><h2 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h2><p>CSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。</p><h3 id="服务端防御"><a href="#服务端防御" class="headerlink" title="服务端防御"></a>服务端防御</h3><p>服务端的预防 CSRF 攻击的方式方法有多种，但思路上都是差不多的，主要从以下两个方面入手： 1、正确使用 GET，POST 请求和 cookie；2、在非 GET 请求中增加 token并验证</p><p>（1）遵循标准的GET动作<br>只允许GET请求检索数据，但是不允许它修改服务器上的任何数据。这个修改可以防止利用{img}标签或者其它的类型的GET请求的CSRF攻击。</p><p>（2）为页面增加随机数<br>当用户访问站点时，该站点应该生成一个（密码上很强壮的）伪随机值，并在用户的计算机上将其设为cookie。站点应该要求每个表单都包含该伪随机 值（作为表单值和cookie值）。当一个POST请求被发给站点时，只有表单值和cookie值相同时，该请求才会被认为是有效的。当攻击者以一个用户的名义提交表单时，他只能修改该表单的值。攻击者不能读取任何发自该服务器的数据或者修改cookie值，这是同源策略的缘故。这意味着，虽然攻击者可以用表单发送任何他想要的值，但是他却不能修改或者读取存储在该cookie中的值。因为cookie值和表单值必须是相同的，所以除非攻击者能猜出该伪随机值，否则他就无法成功地提交表单。</p><p>（3）在非 GET 请求中增加 token并验证<br>CSRF 攻击能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>（4）检查 HTTP Referer 字段<br>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，在通常情况下，Referer字段应和请求的地址位于同一域名下，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory%EF%BC%8C%E7%94%A8%E6%88%B7%E5%BF%85%E9%A1%BB%E5%85%88%E7%99%BB%E9%99%86">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆</a> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>（5）在 HTTP 头中自定义属性并验证<br>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p><h3 id="客户端防御"><a href="#客户端防御" class="headerlink" title="客户端防御"></a>客户端防御</h3><p>由于使攻击者成功地执行CSRF攻击的请求是由浏览器发出的，所以可以创建客户端工具来保护用户不受此种攻击。现有的工具RequestRodeo 通过在客户和服务器之间充当代理来防止CSRF攻击。如果RequestRodeo发现了一个它认为是非法的请求，它会从该请求剥离验证信息。虽然这种方 式在很多情况下都能有效，但是它具有一些局限性。具体地说，当客户端使用了SSL认证或者使用JavaScript生成部分页面（因为 RequestRodeo分析的是在浏览器显示之前的流经代理的那些数据）时，它就不起作用了。</p><p>人们已经开发了一个浏览器插件，不仅可以使用户可以免受某些类型的CSRF攻击，并且还能克服以上所述的局限性，这个工具是作为Firefox浏览器的扩 展实现的，其地址是<a href="http://www.cs.princeton.edu/%CB%9Cwzeller/csrf/protector/%E3%80%82">http://www.cs.princeton.edu/˜wzeller/csrf/protector/。</a> 为了有效地防范CSRF攻击，用户需要下载安装这个扩展。该扩展会拦截所有的HTTP请求，并判断是否允许该HTTP请求。这个判断要用到下列规则。</p><p>首先，POST请求之外的任何要求都是允许的。第二，如果发出请求的站点和目标站点符合同源策略的要求，那么该请求被允许。第三，如果发出请求的站点被允许 使用Adobe的跨域政策来建立一个请求的话，那么该请求也会被允许。如果我们的扩展拒绝一个请求，该扩展会通过一个常见的界面来提示用户（即 Firefox所使用的popup blocker）该请求已经被阻止，并且让用户选择是否将站点添加到一个白名单中。</p><p>该扩展仅仅拦截POST请求。这意味着，它无法保护用户免受使用GET请求的CSRF攻击 阻止这种类型的攻击的唯一方法是不允许任何跨域GET请求，或只允许用户一次只能登录到一个站点，但是这两个限制可能是用户无法忍受的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React中的虚拟DOM</title>
      <link href="/blog/2024/04/10/React%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM%E4%B8%8EFiber%E6%9E%B6%E6%9E%84/"/>
      <url>/blog/2024/04/10/React%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM%E4%B8%8EFiber%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><p>从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。<br>虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对DOM的描述。它设计的最初目的，就是更好的跨平台，比如node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟dom，因为虚拟dom本身是js对象。 在代码渲染到页面之前，vue或者react会把代码转换成一个对象（虚拟DOM）。以对象的形式来描述真实dom结构，最终渲染到页面。在每次数据发生变化前，虚拟dom都会缓存一份，变化之时，现在的虚拟dom会与缓存的虚拟dom进行比较。在vue或者react内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。</p><h2 id="为什么要使用虚拟DOM？"><a href="#为什么要使用虚拟DOM？" class="headerlink" title="为什么要使用虚拟DOM？"></a>为什么要使用虚拟DOM？</h2><p>为什么要用 Virtual DOM：<br>（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能<br>下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶</p><p>真实DOM∶ 生成HTML字符串＋ 重建所有的DOM元素<br>Virtual DOM∶ 生成vNode＋ DOMDiff＋必要的DOM更新</p><p>Virtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，我依然可以给你提供过得去的性能。<br>（2）跨平台<br>Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。</p><p>虚拟DOM相对原生的DOM不一定是效率更高，如果只修改一个按钮的文案，那么虚拟 DOM 的操作无论如何都不可能比真实的 DOM 操作更快。在首次渲染大量DOM时，由于多了一层虚拟DOM的计算，虚拟DOM也会比innerHTML插入慢。它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。所以要根据具体的场景进行探讨。<br>在整个 DOM 操作的演化过程中，其实主要矛盾并不在于性能，而在于开发者写得爽不爽，在于研发体验&#x2F;研发效率。虚拟 DOM 不是别的，正是前端开发们为了追求更好的研发体验和研发效率而创造出来的高阶产物。虚拟 DOM 并不一定会带来更好的性能，React 官方也从来没有把虚拟 DOM 作为性能层面的卖点对外输出过。虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。</p><h2 id="React-diff算法的原理"><a href="#React-diff算法的原理" class="headerlink" title="React diff算法的原理"></a>React diff算法的原理</h2><p>实际上，diff 算法探讨的就是虚拟 DOM 树发生变化后，生成 DOM 树更新补丁的方式。它通过对比新旧两株虚拟 DOM 树的变更差异，将更新补丁作用于真实 DOM，以最小成本完成视图更新。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44d4ebb48a74ffda63754428c9d5273~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="dom"><br>具体的流程如下：</p><p>真实的 DOM 首先会映射为虚拟 DOM；<br>当虚拟 DOM 发生变化后，就会根据差距计算生成 patch，这个 patch 是一个结构化的数据，内容包含了增加、更新、移除等；<br>根据 patch 去更新真实的 DOM，反馈到用户的界面上。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246e03a02e3e48ff941f921843bd8676~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="diff"></p><h2 id="fiber是什么"><a href="#fiber是什么" class="headerlink" title="fiber是什么"></a>fiber是什么</h2><p>React Fiber 是 React 16 中引入的新的协调引擎或重写的核心算法。目的是增强 React 应用程序的性能和响应性，特别是在动画、布局和手势等交互密集型任务中。Fiber 的核心设计理念是增量渲染（incremental rendering）——即将渲染工作分割成小的单元并在需要时暂停、中断或复用这些单元。</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>react fiber没法让比较的时间缩短，但它使得diff的过程被分成一小段一小段的，因为它有了“保存工作进度”的能力。js会比较一部分虚拟dom，然后让渡主线程，给浏览器去做其他工作，然后继续比较，依次往复，等到最后比较完成，一次性更新到视图上。<br>在新的架构中，每个节点有三个指针：分别指向第一个子节点、下一个兄弟节点、父节点。这种<strong>数据结构</strong>就是fiber，它的遍历规则如下：<br>！<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9a4ecf240734a45a3557fdef7d885d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp">Fiber</a><br>从根节点开始，依次遍历该节点的子节点、兄弟节点，如果两者都遍历了，则回到它的父节点；<br>当一个节点的所有子节点遍历完成，才认为该节点遍历完成；<br>根据这个规则，同样在图中标出了节点遍历完成的顺序。跟树结构对比会发现，虽然数据结构不同，但是节点的遍历开始和完成顺序一模一样。不同的是，当遍历发生中断时，只要保留下当前节点的索引，断点是可以恢复的——因为每个节点都保持着对其父节点的索引。</p><p>这种数据结构之所以被叫做fiber，因为fiber的翻译是纤程，它被认为是<strong>协程</strong>的一种实现形式。协程是比线程更小的调度单位：它的开启、暂停可以被程序员所控制。具体来说，react fiber是通过requestIdleCallback这个api去控制的组件渲染的“进度条”。<br>requesetIdleCallback是一个属于宏任务的回调，就像setTimeout一样。不同的是，setTimeout的执行时机由我们传入的回调时间去控制，requesetIdleCallback是受屏幕的刷新率去控制。本文不对这部分做深入探讨，只需要知道它每隔16ms会被调用一次，它的回调函数可以获取本次可以执行的时间，每一个16ms除了requesetIdleCallback的回调之外，还有其他工作，所以能使用的时间是不确定的，但只要时间到了，就会停下节点的遍历。<br>react因为先天的不足——无法精确更新，所以需要react fiber把组件渲染工作切片；而vue基于数据劫持，更新粒度很小，没有这个压力；<br>react fiber这种数据结构使得节点可以回溯到其父节点，只要保留下中断的节点索引，就可以恢复之前的工作进度；</p><p>React Fiber 是针对就协调器重写的完全向后兼容的一个版本。React 的这种新的协调算法被称为 Fiber Reconciler。这个名字来自于 fiber，它经常被用来表示 DOM 树的节点。<br>Fiber 协调器的主要目标是增量渲染，更好更平滑地渲染 UI 动画和手势，以及用户互动的响应性。协调器还允许你将工作分为多个块，并将渲染工作分为多个帧。它还增加了为每个工作单元定义优先级的能力，以及暂停、重复使用和中止工作的能力。<br>React 的其他一些特性包括从一个渲染函数返回多个元素，支持更好的错误处理（我们可以使用 componentDidCatch 方法来获得更清晰的错误信息），以及 portals。<br>在计算新的渲染更新时，React 会多次回访主线程。因此，高优先级的工作可以跳过低优先级的工作。React 在内部为每个更新定义了优先级。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及其解决</title>
      <link href="/blog/2024/03/28/%E8%B7%A8%E5%9F%9F%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2024/03/28/%E8%B7%A8%E5%9F%9F%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域问题的提出"><a href="#跨域问题的提出" class="headerlink" title="跨域问题的提出"></a>跨域问题的提出</h2><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><p>跨域是指在浏览器环境中存在的一种资源同源保护策略。当页面使用ajax&#x2F;fetch进行网络请求或者页面进行资源请求时，网络协议、域名、端口不一致时就会触发浏览器的同源策略保护机制。</p><p>当你的浏览器出现跨域的时候,会有固定格式的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://127.0.0.1:3000/api/getbooks&#x27; from origin &#x27;xxx&#x27; has been blocked </span><br><span class="line">by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><h4 id="什么时候会产生跨域？"><a href="#什么时候会产生跨域？" class="headerlink" title="什么时候会产生跨域？"></a>什么时候会产生跨域？</h4><p> 跨域 : “ajax请求地址” 与 “当前页面地址”  “不同源” , 称为跨域<br>    (1)ajax请求 : 跨域只会出现在ajax请求<br>        * ajax地址 : 服务器接口文档地址<br>    (2)当前页面地址 :  location.href<br>    (3)不同源 : 协议名、ip地址、端口号  只要有任意一个不相同,就是不同源</p><h4 id="什么是同源？"><a href="#什么是同源？" class="headerlink" title="什么是同源？"></a>什么是同源？</h4><p> 同源 :  协议名、ip地址、端口号 三者一致就叫同源<br>    当前页面地址 : <a href="http://127.0.0.1:3000/home/index.html">http://127.0.0.1:3000/home/index.html</a><br>    ajax地址1 : <a href="https://127.0.0.1:3000/abc">https://127.0.0.1:3000/abc</a>   (不同源,协议不同)<br>    ajax地址2 : <a href="http://127.0.0.1:3000/abc">http://127.0.0.1:3000/abc</a>   (同源, 三码合一)<br>    ajax地址3 : <a href="http://192.168.48.81:3000/abc">http://192.168.48.81:3000/abc</a>  (不同源, ip不同)<br>    ajax地址4 : <a href="http://127.0.0.1:4399/abc">http://127.0.0.1:4399/abc</a> (不同源,端口号不同)</p><h2 id="如何解决跨域问题？"><a href="#如何解决跨域问题？" class="headerlink" title="如何解决跨域问题？"></a>如何解决跨域问题？</h2><h4 id="CORS技术解决方案-目前的技术主流"><a href="#CORS技术解决方案-目前的技术主流" class="headerlink" title="CORS技术解决方案(目前的技术主流)"></a>CORS技术解决方案(目前的技术主流)</h4><pre><code>只需要在服务器端设置一个允许跨域响应头：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure></code></pre><h4 id="JASONP解决方案"><a href="#JASONP解决方案" class="headerlink" title="JASONP解决方案"></a>JASONP解决方案</h4><pre><code>1.核心原理 : 利用script标签src属性来发送请求, 因为跨域只对ajax有限制2.了解script标签src属性做了什么事情    (1)给服务器发送请求    (2)执行服务器响应返回的js代码3.jsonp完整流程    (1)浏览器 : 声明一个函数,用于接收服务器响应数据    (2)浏览器: 写一个script标签, 路径是jsonp请求地址,添加一个额外参数callback=函数名    (3)服务器: 处理完请求之后, 返回一个函数调用的js代码,格式res.send( &#39;函数名(响应数据)&#39; )        * 函数名需要从参数callback获取(4)浏览器就会执行script标签响应的js代码</code></pre><h2 id="跨域场景模拟"><a href="#跨域场景模拟" class="headerlink" title="跨域场景模拟"></a>跨域场景模拟</h2><h4 id="CORS的场景模拟"><a href="#CORS的场景模拟" class="headerlink" title="CORS的场景模拟"></a>CORS的场景模拟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//模拟浏览器发送跨域请求</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="comment">//cors按钮</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//(1).实例化ajax对象</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        <span class="comment">//(2).设置请求方法和地址</span></span><br><span class="line">        <span class="comment">//get请求的数据直接添加在url的后面 格式是 url?key=value</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/abc&#x27;</span>)</span><br><span class="line">        <span class="comment">//(3).发送请求</span></span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">        <span class="comment">//(4).注册回调函数</span></span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟服务器接受跨域请求</span></span><br><span class="line">    <span class="comment">//1.导入模块</span></span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line">    <span class="comment">//2.创建服务器</span></span><br><span class="line">    <span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置跨域中间件 : 类似于拦截器,会给每一个路由自动设置允许跨域响应头</span></span><br><span class="line">    <span class="comment">// //(1)导入模块</span></span><br><span class="line">    <span class="comment">// const cors = require(&#x27;cors&#x27;)</span></span><br><span class="line">    <span class="comment">// //(2)使用模块</span></span><br><span class="line">    <span class="comment">// app.use(cors())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cors技术解决跨域</span></span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//允许跨域响应头</span></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        <span class="comment">//设置content-type响应头</span></span><br><span class="line">        <span class="comment">//响应数据</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;我是html&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JASONOP的场景模拟"><a href="#JASONOP的场景模拟" class="headerlink" title="JASONOP的场景模拟"></a>JASONOP的场景模拟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1.jsonp整体工作流程(把jsonp封装到按钮点击事件里面)</span></span><br><span class="line"><span class="comment">      浏览器在动态创建script标签时，相当于向url发送了一次get请求，且该请求</span></span><br><span class="line"><span class="comment">      不受跨域约束，同时在请求参数中携带了一个回调函数，回调函数中携带了</span></span><br><span class="line"><span class="comment">      服务器返回的信息。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//服务器接收的回调函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getBook</span> = res =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="comment">//一旦响应了jsonp数据之后,就移除script标签</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#jsonp&#x27;</span>).<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//(1)声明函数接收服务器响应数据 (需要是全局函数)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)给页面动态添加script</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:3000/aaa?callback=getBook&#x27;</span></span><br><span class="line">        script.<span class="property">id</span> = <span class="string">&#x27;jsonp&#x27;</span></span><br><span class="line">        <span class="comment">//一般动态jsonp会添加到head标签</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器对jsonp请求的响应</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.导入模块</span></span><br><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line">    <span class="comment">//2.创建服务器</span></span><br><span class="line">    <span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line">                app.<span class="title function_">get</span>(<span class="string">&#x27;/aaa&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">        <span class="comment">//调用浏览器传递过来的那个函数名</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;req.query.callback&#125;</span>([&quot;西游记&quot;,&quot;水浒传&quot;])`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.开启服务器</span></span><br><span class="line">    app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>JSONP方法的优点：兼容性好，支持老的浏览器<br>缺点：只支持get请求，因为script标签请求资源本质就是一个get请求<br>    需要服务端专门配置，把数据用callback函数名包裹起来再返回</p><h2 id="深入了解CORS方案"><a href="#深入了解CORS方案" class="headerlink" title="深入了解CORS方案"></a>深入了解CORS方案</h2><blockquote><p>CORS是w3c指定的跨域方案，支持所有类型的请求；兼容性：ie不能低于ie 10<br>CORS跨域方案将所有请求划分为简单请求和非简单请求两类，对其分别采用不同的处理方案。</p></blockquote><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>同时满足以下两个条件的请求属于简单请求：</p><p>请求方法是get、 post、 head中的一种<br>http头字段不超出：<br>Accept<br>Accept-Language<br>Accept-Language<br>Content-Type仅限于text&#x2F;plain、multipart&#x2F;form-data、application&#x2F;x-www-form-urlencoded</p><h4 id="简单请求流程"><a href="#简单请求流程" class="headerlink" title="简单请求流程"></a>简单请求流程</h4><p>浏览器在请求头中自动加入origin字段，origin字段用来说明本次请求来自哪个源（协议+域名+端口），服务器根据这个值，决定是否同意这次请求。<br>如果origin指定的源，不在许可范围内，服务器会返回一个正常的http回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。<br>如果Origin指定的域名在许可范围内，服务器返回的头字段中会包含Access-Control-Allow-Origin，它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><h4 id="如何设置cookie？"><a href="#如何设置cookie？" class="headerlink" title="如何设置cookie？"></a>如何设置cookie？</h4><p>cors请求默认不携带cookie，如果想要发送cookie，需要服务端和客户端同时设置<br>一方面要服务器同意，指定Access-Control-Allow-Credentials: true<br>另一方面，开发者必须在ajax请求中打开withCredentials属性。xhr.withCredentials &#x3D; true;</p><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>预检请求<br>非简单请求需要先发出一个预检请求，预检请求方法是OPTIONS，用来获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响（PUT、delete）<br>请求头字段<br>Origin<br>Access-Control-Request-Method<br>Access-Control-Request-Headers</p><h4 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h4><ul><li><p>如果允许跨源请求</p><ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Methods（返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。）</li><li>Access-Control-Allow-Headers（是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。）</li><li>Access-Control-Allow-Credentials<br>  *Access-Control-Max-Age该字段可选，用来指定本次预检请求的有效期，单位为秒。在此期间，不用发出另一条预检请求。</li></ul></li><li><p>如果不允许，比如origin不在信任名单内,会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。浏览器就会报错</p></li></ul><h4 id="正常请求"><a href="#正常请求" class="headerlink" title="正常请求"></a>正常请求</h4><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>跨域是浏览器的保护机制，如果绕过浏览器，使用代理服务器去请求目标服务器上的数据，就不会受跨域影响。因此前端可以通过脚手架或webpack配置devSever下的proxy选项，将&#x2F;api开头的请求转发到真实服务器上。<br>在生产环境下也可以使用nginx配置反向代理来解决跨域。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React组件通信</title>
      <link href="/blog/2024/03/27/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/blog/2024/03/27/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>在 React 中，父子组件的通信是常见的问题，除了使用状态管理工具（如redux）以外，也可以实现父子组件的相互通信。<br>其中，父组件可以通过props、原型方法向子组件通信，子组件可以通过回调函数、事件冒泡向父组件通信。</p><h2 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h2><ol><li>使用props通信<br>name作为props由父组件传递给子组件，子组件拿到name后，渲染在页面上。参数name由父组件传递给了子组件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params">&#123; name &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Father</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>使用原型方法通信<br>父组件通过原型方法向子组件传递数据。父组件通过React.createRef()创建Ref，保存在实例属性myRef上。父组件中，渲染子组件时，定义一个Ref属性，值为刚创建的myRef。<br>父组件调用子组件的myFunc函数，传递一个参数，子组件接收到参数，打印出参数。<br>参数从父组件传递给子组件，完成了父组件向子组件通信。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">myFunc</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="comment">// 创建Ref，并保存在实例属性myRef上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用子组件的函数，传递一个参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="title function_">myFunc</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><ol><li>使用回调函数通信<br>父组件通过props传递一个回调函数给子组件，子组件调用该回调函数，传递一个参数，父组件接收到参数，完成子组件向父组件通信。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params">&#123; setCount &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>计数值：&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> <span class="attr">setCount</span>=<span class="string">&#123;setCount&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Father</span>;</span><br></pre></td></tr></table></figure><h2 id="跨级组件-兄弟组件通信"><a href="#跨级组件-兄弟组件通信" class="headerlink" title="跨级组件&#x2F;兄弟组件通信"></a>跨级组件&#x2F;兄弟组件通信</h2><ol><li>使用context通信<br>使用React.createContext()创建一个Context对象，该对象包含一个Provider组件和一个Consumer组件。<br>Provider组件用于提供数据，Consumer组件用于接收数据。</li></ol><blockquote><p>context是一个全局变量,像是一个大容器,在任何地方都可以访问到,我们可以把要通信的信息放在context上,然后在其他组件中可以随意取到;但是React官方不建议使用大量context,尽管他可以减少逐层传递,但是当组件结构复杂的时候,我们并不知道context是从哪里传过来的;而且context是一个全局变量,全局变量正是导致应用走向混乱的罪魁祸首.</p></blockquote><p>实现步骤：<br>1.使用 createContext 方法创建一个 上下文对象 Ctx（上下文对象的名字可以随便起）；<br>2.在 顶层组件（App）中通过 Ctx.Provider组件（高阶组件） 提供数据；<br>3.在 底层组件（B）中通过 useContext 钩子函数 使用数据；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、使用 createContext 创建上下文对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MsgContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">B</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 3、在底层组件，使用 useContext 钩子函数获取数据</span></span><br><span class="line">  <span class="keyword">const</span> msg = <span class="title function_">useContext</span>(<span class="title class_">MsgContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>this is B Component<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;msg&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="string">&#x27;this is app msg&#x27;</span>;</span><br><span class="line">  <span class="comment">// 2、在顶层组件，通过 Provider将数据传递给底层组件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* value属性提供数据，不能更改属性名，只能使用value */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 一定要使用 MsgContext.provider 组件包裹住层级组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MsgContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;msg&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is App Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MsgContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义事件<br>使用自定义事件进行组件间通信是一种非常灵活的方法。在 React 中，我们可以使用第三方库，如 mitt 或 eventemitter3 来实现这一机制。下面是一个基于此思想的实现示例。以下是使用 mitt 的示例。mitt 是一个轻量级的事件发射器&#x2F;监听器库。</li></ol><p>1.创建一个mitt实例<br>使用 npm install mitt 安装事件监听器，然后创建一个 Event 实例，这个实例将在整个应用中共享。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter;</span><br></pre></td></tr></table></figure><p>2.在 app.tsx 中触发事件<br>在 app.tsx 中，你可以触发一个自定义事件，这个事件将被其他组件监听和响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;./emitter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">openPopup</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    emitter.<span class="title function_">emit</span>(<span class="string">&#x27;togglePopup&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;openPopup&#125;</span>&gt;</span>打开弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 其他组件 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>3.在其他组件中监听事件<br>在你的公共组件（例如一个弹窗组件）中，监听之前在 app.tsx 中触发的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;./emitter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Popup</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOpen, setIsOpen] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">toggleListener</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setIsOpen</span>(state);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    emitter.<span class="title function_">on</span>(<span class="string">&#x27;togglePopup&#x27;</span>, toggleListener);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      emitter.<span class="title function_">off</span>(<span class="string">&#x27;togglePopup&#x27;</span>, toggleListener);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isOpen) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 弹窗内容 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIsOpen(false)&#125;&gt;关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Popup</span>;</span><br></pre></td></tr></table></figure><p>这个例子展示了如何使用 mitt 来实现跨组件通信。这种方法对于那些不便于通过 props 或 state 进行传递的复杂交互特别有用。它还可以帮助你减少对全局状态管理解决方案的依赖，从而使组件保持更加解耦和可重用。</p><h2 id="其他组件通信方案-待完善……"><a href="#其他组件通信方案-待完善……" class="headerlink" title="其他组件通信方案(待完善……)"></a>其他组件通信方案(待完善……)</h2><ol><li><p>使用Redux<br>Redux是一个状态管理库，它提供了一种集中式的方式来管理应用程序的状态。使用Redux可以方便地实现组件之间的通信，因为所有的状态都存储在Redux中，组件可以通过订阅Redux中的状态来获取最新的状态。</p></li><li><p>使用React ref<br>React ref是一个特殊的属性，它允许你获取到组件实例的引用。通过使用ref，你可以将子组件的实例传递给父组件，从而实现子组件向父组件通信。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中的hook函数</title>
      <link href="/blog/2024/03/26/React%E4%B8%AD%E7%9A%84hook%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2024/03/26/React%E4%B8%AD%E7%9A%84hook%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>useState是React中常用的一个hook函数，用于在函数组件中实现状态管理。它接收一个初始状态值作为参数，并返回一个状态变量和一个更新状态的函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 &quot;count&quot; 的 state 变量</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    </span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从闭包到内存管理————记一次面试经历</title>
      <link href="/blog/2024/03/21/javacript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/blog/2024/03/21/javacript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要记录一次面试经历，面试官从闭包问起，逐步深入到内存管理的相关问题。</p></blockquote><hr><h4 id="首先解释什么是闭包"><a href="#首先解释什么是闭包" class="headerlink" title="首先解释什么是闭包"></a>首先解释什么是闭包</h4><p>我的回答从变量的作用域入手，闭包指一个可以访问到其他函数作用域的函数。<br>js的链式作用域：一个函数可以访问到父级作用域的变量，但是父级不能访问函数内部的变量。</p><h4 id="闭包有什么应用场景，有什么优势以及劣势"><a href="#闭包有什么应用场景，有什么优势以及劣势" class="headerlink" title="闭包有什么应用场景，有什么优势以及劣势"></a>闭包有什么应用场景，有什么优势以及劣势</h4><ol><li><p>应用场景举例：<br> (1)实现变量的私有化,实际上相当于定义了一个类。<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAge</span>()); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><br><br> (2)setTimeOut()函数传参，原生的setTimeOut函数的第一个参数不能传参，使用闭包可实现对setTimeOut函数的封装。<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">message,time</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    &#125;,time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p></li><li><p>使用闭包带来的副作用<br> (1)闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。闭包，不会在调用结束后被垃圾回收机制回收，解决方法是，在退出函数之前，将不使用的局部变量全部删除(赋值为null)。<br> (2)闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ol><h4 id="javascirpt的垃圾回收和内存管理机制"><a href="#javascirpt的垃圾回收和内存管理机制" class="headerlink" title="javascirpt的垃圾回收和内存管理机制"></a>javascirpt的垃圾回收和内存管理机制</h4><ol><li><strong>标记清理</strong>是最常用的垃圾回收策略，当变量进入执行环境时，比如函数中声明一个变量，这个变量会被加上存在于上下文标记，离开上下文时，也会被加上离开上下文的标记。垃圾回收程序运行时，会标记所有变量，然后将所有在上下文中和上下文中引用的变量标记清除，随后销毁所有带标记的值，并回收内存。</li><li><strong>引用计数</strong>是另一种跟踪内存使用情况的方法，它把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果一个对象没有任何引用，即“对象引用计数为0”，那么该对象就会被垃圾回收。引用计数在循环引用时无法回收内存，现已被弃用。</li><li><strong>分代回收</strong>V8引擎将内存分为新生代和老生代，新生代中对象存活率低，老生代中对象存活率高。<br> 新生代 —— 就是指存活时间较短的对象，例如：一个局部作用域中，只要函数执行完毕之后变量就会回收。<br> 老生代 —— 就是指存活时间较长的对象，例如：全局对象，闭包变量数据。<br> 新生代内存区分为两个等大小空间，使用空间为From，空闲空间为To。如果需要申请空间使用，回收步骤如下： 1. 首先会将所有活动对象存储于From空间，这个过程中To是空闲状态。 2. 当From空间使用到一定程度之后就会触发GC操作，这个时候会进行标记整理对活动对象进行标记并移动位置将使用空间变得连续，便于后续不会产生碎片化空间。 3. 将活动对象拷贝至To空间，拷贝完成之后活动空间就有了备份，这个时候就可以考虑回收操作了。 4. 把From空间完成释放，回收完成 5. 对From和To名称进行调换，继续重复之前的操作。总结就是：使用From -&gt; 触发GC标记整理 -&gt; 拷贝到To -&gt; 回收From -&gt; 名称互换重复之前。<br> 老生代中的对象使用“Mark-Sweep”(标记清除)和“Mark-Compact”(标记整理)两种算法。</li></ol><h4 id="内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？"><a href="#内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？" class="headerlink" title="内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？"></a>内存泄漏是什么，内存泄漏的具体场景有哪些，怎么排查内存泄漏？</h4><ol><li>内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</li><li>内存泄漏的常见场景：<br> (1)全局变量和闭包<br> 解决方法：全局变量应先声明再赋值，将全局变量和闭包变量设置为null，让它们在内存中消失。<br> (2)被遗忘的DOM元素<br><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>我是子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    root.<span class="title function_">removeChild</span>(child)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//这里的child元素虽然从dom树中被移除，但全局变量child仍然指向该元素，所以该元素无法被垃圾回收机制回收。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br> 解决方法：在DOM元素被移除时，及时清除它的事件监听器，将对dom元素的引用放在局部作用域中。<br><br> (3)被遗忘的定时器<br> 解决方法：在不需要定时器时，及时清除定时器(调用clearInterval()和clearTimeout())。<br><br> (4)控制台打印console.log()的使用<br> 在控制台打印一个变量时，该变量的this指向了全局对象window,不能被销毁，从而造成内存泄漏。<br> 解决方法：在调试完毕后，及时清理。</li></ol><h4 id="出现了内存泄漏时，如何排查？"><a href="#出现了内存泄漏时，如何排查？" class="headerlink" title="出现了内存泄漏时，如何排查？"></a>出现了内存泄漏时，如何排查？</h4><p>打开开发者工具，选择性能选项卡，点击录制按钮，然后进行一系列操作，再停止录制按钮，此时开发者工具会给出一个内存泄漏的提示。同时记录了每个时刻内存的占用情况。<br>    <img src="https://github.com/sjtu-weimang/blog/blob/main/img/memory.png?raw=true" width=400 height=360></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从promise到async/await</title>
      <link href="/blog/2024/03/16/promise%E4%B8%8Easync/"/>
      <url>/blog/2024/03/16/promise%E4%B8%8Easync/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流的实现及应用</title>
      <link href="/blog/2024/02/26/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2024/02/26/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖的概念和应用场景"><a href="#防抖的概念和应用场景" class="headerlink" title="防抖的概念和应用场景"></a>防抖的概念和应用场景</h2><p>防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p><p>应用场景：<br>适合大量事件一次响应，适用于需要限制函数执行频率的场景，特别是在处理用户输入、页面滚动、窗口调整等频繁触发事件的情况下。<br>具体案例：<br>如音乐平台在线搜索功能，在用户输入搜索关键字时会实时向服务器发送请求并展示搜索结果。为了减少不必要的请求和提升搜索体验，可以使用防抖技术。<br>思路：<br>延迟函数执行并重新计时以确保在一段时间内只执行一次函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>正常情况：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nondebounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>实现防抖时：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;debounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> nondebounceDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nondebounce&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 正常情况下，每次键盘抬起都会触发 ajax 函数</span></span></span><br><span class="line"><span class="language-javascript">        nondebounceDom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">ajax</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> debounceDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;debounce&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用防抖函数，确保在连续触发 keyup 事件时只触发一次 ajax 函数</span></span></span><br><span class="line"><span class="language-javascript">        debounceDom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="title function_">debounce</span>(ajax, <span class="number">500</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 模拟一个 ajax 请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个请求&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 实现防抖的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (timer) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 使用 apply 将函数 fn 的执行上下文设置为当前函数的执行上下文，并传入当前函数的参数</span></span></span><br><span class="line"><span class="language-javascript">                    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;, time)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="节流的概念和应用场景"><a href="#节流的概念和应用场景" class="headerlink" title="节流的概念和应用场景"></a>节流的概念和应用场景</h2><p>应用场景<br>适合大量事件按固定时间平均触发，适用于需要控制事件触发频率的场景，特别是在处理高频率事件，如页面滚动、鼠标移动、键盘按键事件等情况下。<br>具体案例<br>假设有一个在线地图应用，在用户拖动地图时会触发地图移动事件，需要根据地图移动的位置实时更新附近的地点信息。为了减少地点信息更新的频率，可以使用节流技术。<br>思路<br>延迟函数执行，并确保在一定时间内只执行一次，以控制事件触发频率，提高性能和响应速度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>正常情况：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;unThrottle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>实现节流时：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;throttle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取未节流的输入框元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> unDebounceDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;unThrottle&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为未节流的输入框添加 keyup 事件监听器</span></span></span><br><span class="line"><span class="language-javascript">    unDebounceDom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 模拟发送请求的函数，并传入输入框的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">ajax</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取节流后的输入框元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> debounceDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;throttle&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用节流函数包装发送请求的函数</span></span></span><br><span class="line"><span class="language-javascript">    debounceDom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">throttleAjax</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟发送请求的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个请求&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用节流函数节流发送请求的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> throttleAjax = <span class="title function_">throttle</span>(ajax, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> canRun = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!canRun) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">            canRun = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span></span><br><span class="line"><span class="language-javascript">                canRun = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, time)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlet开发记录</title>
      <link href="/blog/2024/02/19/gitlet%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/blog/2024/02/19/gitlet%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitlet顶层设计"><a href="#Gitlet顶层设计" class="headerlink" title="Gitlet顶层设计"></a>Gitlet顶层设计</h2><p>  -.gitlet 存储一切<br>    -objects 存储commit和blob对象（使用hashcode作为文件名）<br>     -commits 存储每个commit对象<br>     -blobs 存储每个blob对象<br>   -refs<br>     -heads 存储分支末端（文件名为分支名，内容为对应commit的hashCode）<br>     -remotes 远端分支（unfinished）<br>   -HEAD 存储当前branch的name，默认为master<br>   -staging 存储缓存区内容（以Stage class的形式存储blob）<br>   -removedStage 存储被rm的文件（以Stage class的形式存储）</p><h2 id="各类及功能的实现"><a href="#各类及功能的实现" class="headerlink" title="各类及功能的实现"></a>各类及功能的实现</h2><p>Commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">String message;</span><br><span class="line">Date curTime;</span><br><span class="line">List&lt;String&gt; parentHashCodes;  <span class="comment">// 第一个code存储的是当前分支的parent</span></span><br><span class="line">List&lt;String&gt; blobCodes; <span class="comment">// 使用hashCode数组表示对应的blob</span></span><br><span class="line">    <span class="comment">//method</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getCurTime</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getParentsHashCode</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBlobCodes</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>功能:记录用户每次commit的msg，时间信息，并对相关文件进行跟踪。每个commit实例都是commit tree上的一个节点。</p><p>Blob</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//实例变量</span></span><br><span class="line">String refs;   <span class="comment">// 存储的是相对路径</span></span><br><span class="line"><span class="type">byte</span>[] content;</span><br><span class="line">   <span class="comment">//method</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRefs</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getContent();</span><br></pre></td></tr></table></figure><p>   功能<br>   将文件的ref和content以blob的形式存起来，方便加入staging area和被commit跟踪。</p><p>Stage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//实例变量</span></span><br><span class="line">List&lt;Blob&gt; blobs;  <span class="comment">// 存储stage for add or removal的blob</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//method</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Blob&gt; <span class="title function_">getBlobs</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Blob blob)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(List&lt;Blob&gt; addBlobs)</span>;</span><br></pre></td></tr></table></figure><p>功能:将stage for add or removal的文件以stage的形式存储，并写入相应的文件中（这个可以优化，实际上只要一个文件就够了）。</p><p>Command<br>init 思路<br>   init<br>   创建必要的文件夹；<br>   初始化initial commit，并将其存入commits文件夹。<br>   失败的情况：<br>   如果有.gitlet文件存在，输出错误信息：<br>   A Gitlet version-control system already exists in the current directory.</p><p>commit的格式如下：<br>   它应该包含hashcode，date和message（merge commit比较特别）</p><p>add 思路<br>   add [file name]<br>   将需要stage for add的文件以blob的形式存入staging中；<br>   如果file和当前commit中跟踪的文件相同（blob的hashCode相同），则不将其添加到staging中；<br>   失败的情况：<br>   如果该文件不存在，输出错误信息：<br>   File does not exist.</p><p>commit 思路<br>   commit [message]<br>   实例化一个新的commit对象，blobCodes复制headCommit中的内容；<br>   更新msg和parentCodes；<br>   根据staging中的blobs更新&#x2F;增加commit跟踪的对象；<br>   根据removedStage中的blobs删除commit跟踪的对象；<br>   将commit存入commits文件夹中；<br>   让当前branch指向新的commit；<br>   清空缓存区（删除staging和removedStage文件）；<br>   失败的情况：<br>   如果缓存区中没有内容（staging和removedStage不存在），输出错误信息：<br>   No changes added to the commit.<br>   如果message为空，输出错误信息：<br>   Please enter a commit message.</p><p>rm 思路<br>   rm [file name]<br>   如果文件在stage for add区域，则将其中缓存区删除；<br>   如果文件被当前commit跟踪，则将其存入stage for removal区域。如果该文件存在于工作目录中，就将其删除；<br>   失败的情况：<br>   如果该文件既不在stage for add区域，也不被当前commit跟踪，输出错误信息：<br>   No reason to remove the file.</p><p>log 思路<br>   log<br>   从当前commit开始，依次回溯打印commit信息，直到initial commit；<br>   如果有多条支路（比如merge commit），选择first parent commit进行打印，忽略另外一条支路。体现在commit的parentHashCodes中，第一个存储的便是first parent；<br>   merge commit比较特别，需要多打印一行；</p><p>   失败的情况：<br>   无</p><p>global-log 思路<br>   global-log<br>   使用gitlet.Utils中的method获取commits文件夹中所有的commit，打印即可，不关心顺序；<br>   失败的情况：<br>   无</p><p>find 思路<br>   find [commit message]<br>   打印所有符合message的commit id，如果有多个结果，一个一行；<br>   遍历commit即可，和global-log的思路类似，不过要筛选一下；<br>   失败的情况：<br>   如果没有符合条件的commit存在，输出错误信息：<br>   Found no commit with that message.</p><p>status 思路<br>   status</p><p>   打印现存的分支名称，读取heads中文件的名称即可；<br>   在当前分支的前面加上*号；<br>   打印缓存区的文件；<br>   打印被删除的文件名称；<br>   最后两项是extra credit的内容，现在不用管，暑假有空再看看吧；<br>   失败的情况：<br>   无</p><p>checkout 思路<br>check out命令有三种使用场景：<br>1.checkout – [file name]<br>   如果文件被当前commit所跟踪，则其放入工作目录中（如果工作目录中有同名文件，则替代它）；<br>   失败的情况：<br>   文件并不被当前commit跟踪，输出错误信息：<br>   File does not exist in that commit.</p><p>2.checkout [commit id] – [file name]<br>   和1很类似，不过换成对应id的commit<br>   失败的情况：<br>   commit不存在，输出错误信息：<br>   No commit with that id exists.<br>   文件不被对应commit跟踪，输出错误信息：<br>   File does not exist in that commit.</p><p>3.checkout [branch name]<br>   checked branch和当前commit所跟踪的文件可以分为三类：<br>      仅被当前commit跟踪（删除文件）<br>      被两个commit共同跟踪（用checked branch中的blobs覆写这些文件）<br>      仅被checked branch跟踪；<br>   仅被checked branch跟踪的文件又可以分为两类：<br>      不存在于当前工作目录（覆写）<br>      已经存在于当前工作目录的文件（打印错误信息）<br>   清空缓存区（删除对应的文件即可）<br>   失败的情况：<br>   如果checked branch不存在，输出错误信息：<br>   No such branch exists.<br>   如果checked branch就是当前分支，输出错误信息：<br>   No need to checkout the current branch.<br>   如果工作目录中存在仅被checked branch跟踪，且将要被覆写的文件，输出错误信息：<br>   There is an untracked file in the way; delete it, or add and commit it first.</p><p>branch 思路<br>   branch [branch name]<br>   在heads文件夹中创建新的branch，内容为当前commit的hashCode；<br>   失败的情况：<br>   无</p><p>rm-branch 思路<br>   rm-branch [branch name]<br>   删除heads文件夹中对应name的文件即可；<br>   失败的情况：<br>   如果给定的branch不存在，输出错误信息：<br>   A branch with that name does not exist.<br>   如果尝试删除的branch为当前branch，输出错误信息：<br>   Cannot remove the current branch.</p><p>reset 思路<br>   reset [commit id]<br>   相当于check out到对应的commit；<br>   复用check out中的代码；<br>   将当前分支存储的内容改为对应commit的id；<br>   清空缓存区（删除对应的文件）；<br>   失败的情况：<br>   如果没有对应的commit存在，输出错误信息：<br>   No commit with that id exists.<br>   如果工作目录存在仅被reset commit跟踪，且将被覆写的文件，输出错误信息：<br>   There is an untracked file in the way; delete it, or add and commit it first.</p><p>merge 思路<br>   merge [branch name]<br>   这个是整个项目中最复杂的命令了，推荐观看intro视频梳理思路。</p><p>   失败的情况：<br>   如果缓存区还有blob（文件存在），输出错误信息：<br>   You have uncommitted changes.<br>   如果给定的branch不存在，输出错误信息：<br>   A branch with that name does not exist.<br>   如果给定的branch和当前branch相同，输出错误信息：<br>   Cannot merge a branch with itself.<br>   如果工作目录存在仅被merge commit跟踪，且将被覆写的文件，输出错误信息：<br>   There is an untracked file in the way; delete it, or add and commit it first.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前后花了大概一周左右的时间，兜兜转转总算做完了基础的部分。</p><p>收获<br>   复习了cs61b前期所学的大部分知识，coding能力有了提升；<br>   开始的时候一片空白，无从下手，充满恐惧；完成之后则是满满的成就感。</p><p>不足<br>   设计和理解存在不足——在动手coding之前没有充分的准备，对项目的规划不足，有很多地方都不理解就开始动手了，导致后期经常更改前面的代码，浪费了很多时间；<br>   项目中使用的数据结构没有事先规划好，大量无脑使用List，浪费很多时间；<br>   merge寻找splitPoint的算法还存在可以改进的点，现在使用的时间复杂度太高了（可以使用BFS来做）；<br>   在定义函数前仔细考虑，检查是否有同样功能的函数已经被定义了，不要重复造轮子；<br>   使用check，is，get，find等关键字细分函数的功能；<br>   Java泛型和数组（有空看一下）。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-router-v6</title>
      <link href="/blog/2024/02/16/react-router-v6/"/>
      <url>/blog/2024/02/16/react-router-v6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ajax,fetch与aixos</title>
      <link href="/blog/2023/12/12/%E4%B8%8D%E5%90%8C%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2023/12/12/%E4%B8%8D%E5%90%8C%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>英译过来是Aysnchronous JavaScript And XML，直译是异步JS和XML（XML类似HTML，但是设计宗旨就为了传输数据，现已被JSON代替），解释一下就是说以XML作为数据传输格式发送JS异步请求。但实际上ajax是一个一类技术的统称的术语，包括XMLHttpRequest、JS、CSS、DOM等，它主要实现网页拿到请求数据后不用刷新整个页面也能呈现最新的数据。ajax是最原生的请求方式。以下是一个ajax请求实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\\使用ajax需要新建一个xmlHttpRequest对象</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 配置请求参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:3000/api/getData&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 监听请求状态</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用的xhr对象属性：</p><ul><li>readyState：请求状态，0表示未初始化，1表示正加载，2表示加载完成，3表示正交互，4表示请求完成。</li><li>status：请求状态码，200表示请求成功，404表示请求失败。</li><li>responseText：请求返回的数据。</li></ul><p>常用的xhr对象方法：</p><ul><li>open(method, url, async)：配置请求参数。</li><li>send(data)：发送请求。</li><li>setRequestHeader(header, value)：设置请求头。</li><li>abort()：取消请求。</li></ul><p>常用的xhr对象事件：</p><ul><li>onreadystatechange：请求状态发生变化时触发。</li><li>onloadstart：请求开始时触发。</li><li>onload：请求成功时触发。</li><li>onloadend：请求结束时触发。</li><li>onerror：请求失败时触发。</li></ul><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch是ES6引入的新的API，它提供了一个更加简洁的API，用于发送HTTP请求。fetch的返回值是一个Promise对象，可以通过then方法来处理请求结果。它的特点是：</p><ul><li>使用 promise，不使用回调函数。</li><li>采用模块化设计，比如 rep、res 等对象分散开来，比较友好。</li><li>通过数据流对象处理数据，可以提高网站性能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个简单的fetch请求实例</span></span><br><span class="line"><span class="comment">// get请求</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/get&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求错误！状态码为：&#x27;</span>, res.<span class="property">status</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">text</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;no-cors&#x27;</span>,  <span class="comment">// 设置cors表示只能发送跨域的请求，no-cors表示跨不跨域都能发</span></span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>fetch API的语法：</p><p>fetch()的第一个参数是要请求的url，可以是一个字符串或者一个Request对象。<br>第二个参数是一个可选的配置对象，可以用来设置请求的参数，比如method、headers等。<br>常见的请求参数有：</p><ul><li>method：请求方法，比如GET、POST等。</li><li>headers：请求头部信息，可以设置多个头部信息。</li><li>body：请求体，可以设置请求的参数。</li><li>mode：请求的模式，比如cors、no-cors等。</li><li>credentials：请求的凭据，比如same-origin、include等。</li><li>cache：请求的缓存策略，比如default、no-store等。</li></ul><p>fetch()的返回值是一个Promise对象，可以通过then方法来处理请求结果。</p><p>常用的fetch API属性：</p><ul><li>response：请求返回的Response对象。</li><li>responseText：请求返回的文本数据。</li><li>responseURL：请求返回的URL地址。</li><li>responseType：请求返回的数据类型。</li><li>responseHeaders：请求返回的头部信息。</li></ul><p>fetch的缺点：</p><ul><li>fetch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li><li>fetch默认不会带cookie，需要添加配置项。</li><li>fetch不支持abort，不支持超时控制，不能阻止请求过程继续在后台运行，造成了流量的浪费。</li><li>fetch没有办法原生监测请求的进度，而XHR可以。</li><li>fetch不会接受跨域 cookies；你也不能使用fetch() 建立起跨域会话。其他网站的Set-Cookie头部字段将会被无视。</li></ul><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios是一个基于Promise的HTTP库，可以用在浏览器和node.js中，是当前使用最多的请求方法。。它的特点有：</p><ul><li>支持浏览器和node.js</li><li>支持Promise API</li><li>支持请求和响应拦截器</li><li>自动转换JSON数据</li><li>客户端支持防止CSRF</li><li>请求可以设置不同的header</li></ul><p>在浏览器端使用promise和xhr封装一个axios():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">request</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resove</span>)=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;url=<span class="string">&#x27;&#x27;</span>, data=&#123;&#125;, method=<span class="string">&#x27;get&#x27;</span>&#125; = config; <span class="comment">//结构传参</span></span><br><span class="line">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;   <span class="comment">// 创建请求对象</span></span><br><span class="line">      xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">      xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resove</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">          <span class="comment">// 异步请求返回后将Promise转为成功态并将结果导出</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Axios除了和jquery ajax一样封装了原生的XHR，还提供了很多比如：并发请求、拦截等多种接口，同时它的体积还比较小，也没有下文fetch的各种问题，可以说是目前最佳的ajax请求方式了。<br>拦截器是指在请求发送前或响应到达前，对数据做进一步的处理的程序。配置请求拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">lang</span>=<span class="string">&#x27;zh-CN&#x27;</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在响应拦截器中可以进行一些响应数据的处理，并且对异常响应进行相应的错误处理，当然在响应拦截器中还可以进行一些其他的操作，一切都取决于你的需求。配置响应拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">const</span> message=res.<span class="property">data</span>.<span class="property">message</span>;</span><br><span class="line">    <span class="keyword">if</span>(message)&#123;</span><br><span class="line">      <span class="comment">// 弹窗提示</span></span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS相关记录</title>
      <link href="/blog/2023/11/28/css%E7%9B%B8%E5%85%B3/"/>
      <url>/blog/2023/11/28/css%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>. CSS中可继承与不可继承属性有哪些<br>一、无继承性的属性</p><p>display：规定元素应该生成的框的类型<br>文本属性：</p><p>vertical-align：垂直文本对齐<br>text-decoration：规定添加到文本的装饰<br>text-shadow：文本阴影效果<br>white-space：空白符的处理<br>unicode-bidi：设置文本的方向</p><p>盒子模型的属性：width、height、margin、border、padding<br>背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment<br>定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index<br>生成内容属性：content、counter-reset、counter-increment<br>轮廓样式属性：outline-style、outline-width、outline-color、outline<br>页面样式属性：size、page-break-before、page-break-after<br>声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</p><p>二、有继承性的属性</p><p>字体系列属性</p><p>font-family：字体系列<br>font-weight：字体的粗细<br>font-size：字体的大小<br>font-style：字体的风格</p><p>文本系列属性</p><p>text-indent：文本缩进<br>text-align：文本水平对齐<br>line-height：行高<br>word-spacing：单词之间的间距<br>letter-spacing：中文或者字母之间的间距<br>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）<br>color：文本颜色</p><p>元素可见性</p><p>visibility：控制元素显示隐藏</p><p>列表布局属性</p><p>list-style：列表风格，包括list-style-type、list-style-image等</p><p>光标属性</p><p>cursor：光标显示为何种形态</p><ol start="22"><li>CSS预处理器&#x2F;后处理器是什么？为什么要使用它们？<br>预处理器， 如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，mixin， 变量，循环， 函数等对编写以及开发UI组件都极为方便。<br>后处理器， 如： postCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。<br>css预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。<br>其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。<br>使用原因：</li></ol><p>结构清晰， 便于扩展<br>可以很方便的屏蔽浏览器私有语法的差异<br>可以轻松实现多重继承<br>完美的兼容了CSS代码，可以应用到老项目中。</p><p>（3）Webpack 能处理 CSS 吗？如何实现？<br>Webpack 能处理 CSS 吗：</p><p>Webpack 在裸奔的状态下，是不能处理 CSS 的，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；<br>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</p><p>如何用 Webpack 实现对 CSS 的处理：</p><p>Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader<br>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：</p><p>css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；<br>style-loader：创建style标签，把 CSS 内容写入标签。</p><p>在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p><ol start="29"><li>如何判断元素是否到达可视区域<br>以图片显示为例：</li></ol><p>window.innerHeight 是浏览器可视区的高度；<br>document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离；<br>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；<br>内容达到显示区域的：img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</p><ol start="30"><li>z-index属性在什么情况下会失效<br>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。<br>z-index属性在下列情况下会失效：</li></ol><p>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；<br>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；<br>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</p><ol><li>常见的CSS布局单位<br>常用的布局单位包括像素（px），百分比（%），em，rem，vw&#x2F;vh。<br>（1）像素（px）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：</li></ol><p>CSS像素：为web开发者提供，在CSS中使用的一个抽象单位；<br>物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</p><p>（2）百分比（%），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。<br>（3）em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。</p><p>em： 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。<br>rem： rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。作用：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。</p><p>（4）vw&#x2F;vh是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。</p><p>vw：相对于视窗的宽度，视窗宽度是100vw；<br>vh：相对于视窗的高度，视窗高度是100vh；<br>vmin：vw和vh中的较小值；<br>vmax：vw和vh中的较大值；</p><p>vw&#x2F;vh 和百分比很类似，两者的区别：</p><p>百分比（%）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)<br>vw&#x2F;vm：相对于视窗的尺寸</p><ol start="2"><li>px、em、rem的区别及使用场景<br>三者的区别：</li></ol><p>px是固定的像素，一旦设置了就无法因为适应页面大小而改变。<br>em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。<br>em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。</p><p>使用场景：</p><p>对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。<br>对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p><p>为什么需要清除浮动？清除浮动的方式<br>浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。<br>浮动的工作原理：</p><p>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）<br>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</p><p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。<br>浮动元素引起的问题？</p><p>父元素的高度无法被撑开，影响与父元素同级的元素<br>与浮动元素同级的非浮动元素会跟随其后<br>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</p><p>清除浮动的方式如下：</p><p>给父级div定义height属性<br>最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式<br>包含浮动元素的父级标签添加overflow:hidden或者overflow:auto<br>使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html相关记录</title>
      <link href="/blog/2023/11/27/html%E7%9B%B8%E5%85%B3/"/>
      <url>/blog/2023/11/27/html%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？<br>行内元素有：a b span img input select strong；<br>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p；<br>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常见的有：<span class="tag">&lt;<span class="name">br</span>&gt;</span>、<span class="tag">&lt;<span class="name">hr</span>&gt;</span>、<span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span>、<span class="tag">&lt;<span class="name">link</span>&gt;</span>、<span class="tag">&lt;<span class="name">meta</span>&gt;</span>；</span><br><span class="line">鲜见的有：<span class="tag">&lt;<span class="name">area</span>&gt;</span>、<span class="tag">&lt;<span class="name">base</span>&gt;</span>、<span class="tag">&lt;<span class="name">col</span>&gt;</span>、<span class="tag">&lt;<span class="name">colgroup</span>&gt;</span>、<span class="tag">&lt;<span class="name">command</span>&gt;</span>、<span class="tag">&lt;<span class="name">embed</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">keygen</span>&gt;</span>、<span class="tag">&lt;<span class="name">param</span>&gt;</span>、<span class="tag">&lt;<span class="name">source</span>&gt;</span>、<span class="tag">&lt;<span class="name">track</span>&gt;</span>、<span class="tag">&lt;<span class="name">wbr</span>&gt;</span>。</span><br></pre></td></tr></table></figure><p>在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。<br>如何创建 web worker：</p><p>检测浏览器对于 web worker 的支持性<br>创建 web worker 文件（js，回传函数等）<br>创建 web worker 对象<br>10. HTML5的离线储存怎么使用，它的工作原理是什么<br>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br><strong>原理：</strong>HTML5的离线存储是基于一个新建的 .appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示<br>使用方法：<br>（1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：<br>html复制代码<html lang="en" manifest="index.manifest"></p><p>（2）在 cache.manifest 文件中编写需要离线存储的资源：<br>html复制代码CACHE MANIFEST<br>    #v0.11<br>    CACHE:<br>    js&#x2F;app.js<br>    css&#x2F;style.css<br>    NETWORK:<br>    resourse&#x2F;logo.png<br>    FALLBACK:<br>    &#x2F; &#x2F;offline.html</p><p>CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。<br>NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。<br>FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</p><p>（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。<br>如何更新缓存：<br>（1）更新 manifest 文件<br>（2）通过 javascript 操作<br>（3）清除浏览器缓存<br>注意事项：<br>（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。<br>（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。<br>（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。<br>（4）FALLBACK 中的资源必须和 manifest 文件同源。<br>（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。<br>（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。<br>（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。<br> label 的作用是什么？如何使用？<br>label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。</p><p>使用方法1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span>Number:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mobile&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Date:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="16"><li>head 标签有什么作用，其中什么标签必不可少？<br> 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。<br>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。<br>下面这些标签可用在 head 部分：<base>, <link>, <meta>, <script>, <style>, <title>。<br>其中 <title> 定义文档的标题，它是 head 部分中唯一必需的元素。</li><li>文档声明（Doctype）和<!Doctype html>有何作用? 严格模式与混杂模式如何区分？它们有何意义?<br>文档声明的作用： 文档声明是为了告诉浏览器，当前HTML文档使用什么版本的HTML来写的，这样浏览器才能按照声明的版本来正确的解析。<br>的作用：<!doctype html> 的作用就是让浏览器进入标准模式，使用最新的 HTML5 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。<br>严格模式与混杂模式的区分：</li></ol><p>严格模式： 又称为标准模式，指浏览器按照W3C标准解析代码；<br>混杂模式： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；</p><p>区分：网页中的DTD，直接影响到使用的是严格模式还是浏览模式，可以说DTD的使用与这两种方式的区别息息相关。</p><p>如果文档包含严格的DOCTYPE ，那么它一般以严格模式呈现（严格 DTD ——严格模式）；<br>包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）；<br>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现（DTD不存在或者格式不正确——混杂模式）；<br>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(HTML5 没有严格和混杂之分)。</p><p>总之，严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。</p><ol start="18"><li>浏览器乱码的原因是什么？如何解决？<br>产生乱码的原因：</li></ol><p>网页源代码是gbk的编码，而内容中的中文字是utf-8编码的，这样浏览器打开即会出现html乱码，反之也会出现乱码；<br>html网页编码是gbk，而程序从数据库中调出呈现是utf-8编码的内容也会造成编码乱码；<br>浏览器不能自动检测网页编码，造成网页乱码。</p><p>解决办法：</p><p>使用软件编辑HTML网页内容；<br>如果网页设置编码是gbk，而数据库储存数据编码格式是UTF-8，此时需要程序查询数据库数据显示数据前进程序转码；<br>如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的正则表达式</title>
      <link href="/blog/2023/11/12/JavaScirpt%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2023/11/12/JavaScirpt%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="RegExp的常见匹配模式"><a href="#RegExp的常见匹配模式" class="headerlink" title="RegExp的常见匹配模式"></a>RegExp的常见匹配模式</h2><p>ECMAJavaScript通过RegExp类型支持正则表达式，可用于字符串按照一定规则的匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let expression =/pattern/flags</span><br></pre></td></tr></table></figure><h4 id="正则表达式中的元字符"><a href="#正则表达式中的元字符" class="headerlink" title="正则表达式中的元字符"></a>正则表达式中的元字符</h4><p>元字符是正则表达式中的特殊字符，用于表示一些特定的模式。在匹配元字符时必须使用反斜杠’&#39;进行转义，<br>以下是常见的元字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()[]&#123;&#125;\^$|.?*+</span><br></pre></td></tr></table></figure><h4 id="常见的匹配规则"><a href="#常见的匹配规则" class="headerlink" title="常见的匹配规则"></a>常见的匹配规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> \d: 匹配一个数字。</span><br><span class="line"><span class="number">2.</span> \w: 匹配一个字母或数字。</span><br><span class="line"><span class="number">3.</span> \s: 匹配一个空白字符。</span><br><span class="line"><span class="number">4.</span> \b: 匹配一个单词边界。</span><br><span class="line"><span class="number">5.</span> \D: 匹配一个非数字的字符。</span><br><span class="line"><span class="number">6.</span> \W: 匹配一个非字母或数字的字符。</span><br><span class="line"><span class="number">7.</span> \S: 匹配一个非空白字符。</span><br><span class="line"><span class="number">8.</span> \[abcd\]: 匹配方括号中的任意一个字符。</span><br><span class="line"><span class="number">9.</span> \[^abcd\]: 匹配不在方括号中的任意一个字符。</span><br><span class="line"><span class="number">10.</span> \[a-z\]: 匹配指定范围内的任意一个字符。</span><br><span class="line"><span class="number">11.</span> abc$: 匹配以abc结尾的字符串。</span><br><span class="line"><span class="number">12.</span> ^abc: 匹配以abc开头的字符串。</span><br><span class="line"><span class="number">13.</span> \d&#123;<span class="number">3</span>&#125;: 匹配三个数字。</span><br><span class="line"><span class="number">14.</span> a?: 匹配零个或一个a，效果等同于a&#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"><span class="number">15.</span> a*: 匹配零个或多个a，效果等同于a&#123;<span class="number">0</span>,&#125;。</span><br><span class="line"><span class="number">16.</span> a+: 匹配一个或多个a，效果等同于a&#123;<span class="number">1</span>,&#125;。</span><br><span class="line"><span class="number">17.</span> a|b: 匹配a或b，效果等同于a&#123;<span class="number">0</span>,<span class="number">1</span>&#125;|b&#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"><span class="number">18.</span> (abc): 匹配abc，并将匹配结果保存到括号中。</span><br><span class="line"><span class="number">19.</span> (?:abc): 匹配abc，但不保存匹配结果到括号中。</span><br><span class="line"><span class="number">20.</span> (?=abc): 正向先行断言，匹配后面跟着abc的字符串。</span><br><span class="line"><span class="number">21.</span> (?!abc): 负向先行断言，匹配后面不跟着abc的字符串。</span><br><span class="line"><span class="number">22.</span> (?&lt;=abc): 反向先行断言，匹配前面跟着abc的字符串。</span><br><span class="line"><span class="number">23.</span> (?&lt;!abc): 负向反向先行断言，匹配前面不跟着abc的字符串。</span><br><span class="line"><span class="number">24.</span> \bhello\b: 匹配包含hello的单词,\b表示字符边界。</span><br><span class="line"><span class="number">25.</span> \Bhello\B: 匹配不包含hello的单词,\B表示非字符边界。 </span><br></pre></td></tr></table></figure><h4 id="匹配模式的标记flag"><a href="#匹配模式的标记flag" class="headerlink" title="匹配模式的标记flag"></a>匹配模式的标记flag</h4><p>每个正则表达式后方可以附带一个或多个标记，用于控制正则表达式的行为。以下是常见的标记：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g: 全局匹配，匹配字符串中所有满足正则表达式的内容。</span><br><span class="line">i: 不区分大小写，匹配时忽略pattern和字符串的大小写。</span><br><span class="line">m: 多行模式，在查找到一行的末尾后会继续查找。</span><br><span class="line">y: 粘附模式，只查找从lastIndex开始及之后的字符串。</span><br></pre></td></tr></table></figure><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>正则表达式可以直接使用字面量创建，表达式的内容写在两个斜杠‘&#x2F;’之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let expression = /pattern/flags</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>正则表达式也可以使用构造函数创建，构造函数的参数为两个，第一个为pattern，第二个为flags。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> expression = <span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern, flags)</span><br></pre></td></tr></table></figure><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><p>test()方法用于测试字符串是否符合正则表达式的规则，返回一个布尔值true&#x2F;false。<br>test()经常用在if语句中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text =<span class="string">&quot;000-00-0000&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(text));         <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>exec()方法用于在字符串中查找符合正则表达式的内容，返回一个数组。如果没有全局标志g，则每次调用都只会返回第一个匹配的内容。<br>添加g后，每次调用exec()会在字符串中向前搜索下一个匹配项,直到搜索不到返回null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text= <span class="string">&quot;cat,bat,hit,sit,fit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//[ &#x27;cat&#x27;, index: 0, input: &#x27;cat,bat,hit,sit,fit&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//[ &#x27;bat&#x27;, index: 4, input: &#x27;cat,bat,hit,sit,fit&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(text));<span class="comment">//null                  </span></span><br></pre></td></tr></table></figure><h2 id="正则表达式在字符串中的使用"><a href="#正则表达式在字符串中的使用" class="headerlink" title="正则表达式在字符串中的使用"></a>正则表达式在字符串中的使用</h2><h4 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h4><p>match()方法是<strong>字符串的方法</strong>用于在字符串中查找符合正则表达式的内容，返回一个数组，内容与exec()方法相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/World/</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">match</span>(reg);</span><br></pre></td></tr></table></figure><p>search()也是<strong>字符串</strong>的方法，用于在字符串中查找符合正则表达式的内容，返回一个整数，表示匹配到的位置。search()方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 string 的第一个匹配的位置。</p><h4 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a>search()方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text= <span class="string">&quot;cat,bat,hit,sit,fit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = text.<span class="title function_">search</span>(<span class="regexp">/at/g</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>replace()方法是<strong>字符串</strong>的方法，用于在字符串中查找符合正则表达式的内容，并替换为新的内容。replace()支持全局匹配，第一个参数为模式串，第二个参数可以是字符串或一个函数，若第二个参数为函数，则使用函数的返回值进行替换。replace()不改变调用字符串的内容，返回一个新的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/World/</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(reg, <span class="string">&quot;JavaScript&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo部署博客的操作流程和踩过的一些坑</title>
      <link href="/blog/2023/03/16/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/"/>
      <url>/blog/2023/03/16/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>使用hexo部署个人博客教程</p><h1 id="部署流程简介"><a href="#部署流程简介" class="headerlink" title="部署流程简介"></a>部署流程简介</h1><h2 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h2><p>1.hexo依赖于node.js环境运行，在安装node.js后，使用npm安装hexo<br>2.使用hexo init 初始化一个本地仓库<br>3.使用hexo g 生成静态文件<br>4.使用hexo s 启动本地服务器，可以预览效果</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g     <span class="comment">#在全局安装hexo</span></span><br><span class="line">hexo init blog              <span class="comment">#初始化</span></span><br><span class="line"><span class="built_in">cd</span> blog                     <span class="comment">#进入文件目录</span></span><br><span class="line">npm install                 <span class="comment">#安装依赖</span></span><br><span class="line">hexo server                 <span class="comment">#在本地服务器运行</span></span><br></pre></td></tr></table></figure></code></pre><p>这时候个人博客已经可以在本地服务器的4000端口访问了。</p><!-- ![picture](./img/test.jpg "localblog") --><h2 id="准备github仓库"><a href="#准备github仓库" class="headerlink" title="准备github仓库"></a>准备github仓库</h2><p>1.在github上新创建一个仓库，仓库名必须为username.github.io(若仓库名与GitHub账户名不同，则url为username.github.io&#x2F;repoisitoryname)。<br>2.在新仓库的Settings-&gt;Pages-&gt;Build and deployment选项中选择博客网页的源分支，一般为main&#x2F;(root)。<br>3.配置好GitHub的<a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">SSH</a> ,否则在push时会遇到权限问题。<br>4.将本地仓库与远程仓库建立链接：</p><!-- [SSH](https://blog.csdn.net/weixin_42310154/article/details/118340458) --><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地仓库目录下</span></span><br><span class="line">git init                <span class="comment">#初始化本地仓库</span></span><br><span class="line">git remote add origin git@github.com:yourName/repositoryname.git </span><br><span class="line"><span class="comment">#origin是远程仓库的别名</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p><strong>部署到个人网站与一般仓库不同，不能使用”add-commit-pull-push”的推送流程，要借助部署工具</strong></p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save        <span class="comment">#安装部署工具</span></span><br></pre></td></tr></table></figure></code></pre><p>修改根目录下_config.yml配置文档(在键和值之间有一个空格，否则会提示缩进错误！)</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在文档的末尾</span></span><br><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git                                   <span class="comment">#部署方式</span></span><br><span class="line">    repo: &lt;git@github.com&gt;:yourname/blog.git    <span class="comment">#仓库链接</span></span><br><span class="line">    branch: main                                <span class="comment">#对应的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在文档的14-22行</span></span><br><span class="line">url: https://yourname.github.io/blog/           <span class="comment">#博客的网址</span></span><br><span class="line">root: /blog                                     <span class="comment">#GitHub中仓库的路径</span></span><br></pre></td></tr></table></figure></code></pre><p>修改后配置文档后，再次打开终端，输入以下命令进行远程部署。</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean                                  <span class="comment"># 清除缓存文件等</span></span><br><span class="line">hexo g                                      <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                                      <span class="comment"># 部署到远程</span></span><br></pre></td></tr></table></figure></code></pre><p>以后每次新发布文章后，都按照此流程进行部署。<br>这时打开GitHub仓库-&gt;action,可以看到部署的进程，一般需要几分钟。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/06/21/hello-world/"/>
      <url>/blog/2022/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
